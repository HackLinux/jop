//
// Generated by Bluespec Compiler, version 2009.10.B (build 18070, 2009-10-11)
//
// On Fri Mar 12 05:45:29 CET 2010
//
// Method conflict info:
// Method: routers_0_rdwr_req
// Conflict-free: routers_1_rdwr_req,
// 	       routers_1_rd_data,
// 	       routers_1_rdy_cnt,
// 	       routers_2_rdwr_req,
// 	       routers_2_rd_data,
// 	       routers_2_rdy_cnt
// Sequenced before (restricted): routers_0_rdwr_req
// Sequenced after (restricted): routers_0_rd_data, routers_0_rdy_cnt
//
// Method: routers_0_rd_data
// Conflict-free: routers_0_rd_data,
// 	       routers_0_rdy_cnt,
// 	       routers_1_rdwr_req,
// 	       routers_1_rd_data,
// 	       routers_1_rdy_cnt,
// 	       routers_2_rdwr_req,
// 	       routers_2_rd_data,
// 	       routers_2_rdy_cnt
// Sequenced before (restricted): routers_0_rdwr_req
//
// Method: routers_0_rdy_cnt
// Conflict-free: routers_0_rd_data,
// 	       routers_0_rdy_cnt,
// 	       routers_1_rdwr_req,
// 	       routers_1_rd_data,
// 	       routers_1_rdy_cnt,
// 	       routers_2_rdwr_req,
// 	       routers_2_rd_data,
// 	       routers_2_rdy_cnt
// Sequenced before (restricted): routers_0_rdwr_req
//
// Method: routers_1_rdwr_req
// Conflict-free: routers_0_rdwr_req,
// 	       routers_0_rd_data,
// 	       routers_0_rdy_cnt,
// 	       routers_2_rdwr_req,
// 	       routers_2_rd_data,
// 	       routers_2_rdy_cnt
// Sequenced before (restricted): routers_1_rdwr_req
// Sequenced after (restricted): routers_1_rd_data, routers_1_rdy_cnt
//
// Method: routers_1_rd_data
// Conflict-free: routers_0_rdwr_req,
// 	       routers_0_rd_data,
// 	       routers_0_rdy_cnt,
// 	       routers_1_rd_data,
// 	       routers_1_rdy_cnt,
// 	       routers_2_rdwr_req,
// 	       routers_2_rd_data,
// 	       routers_2_rdy_cnt
// Sequenced before (restricted): routers_1_rdwr_req
//
// Method: routers_1_rdy_cnt
// Conflict-free: routers_0_rdwr_req,
// 	       routers_0_rd_data,
// 	       routers_0_rdy_cnt,
// 	       routers_1_rd_data,
// 	       routers_1_rdy_cnt,
// 	       routers_2_rdwr_req,
// 	       routers_2_rd_data,
// 	       routers_2_rdy_cnt
// Sequenced before (restricted): routers_1_rdwr_req
//
// Method: routers_2_rdwr_req
// Conflict-free: routers_0_rdwr_req,
// 	       routers_0_rd_data,
// 	       routers_0_rdy_cnt,
// 	       routers_1_rdwr_req,
// 	       routers_1_rd_data,
// 	       routers_1_rdy_cnt
// Sequenced before (restricted): routers_2_rdwr_req
// Sequenced after (restricted): routers_2_rd_data, routers_2_rdy_cnt
//
// Method: routers_2_rd_data
// Conflict-free: routers_0_rdwr_req,
// 	       routers_0_rd_data,
// 	       routers_0_rdy_cnt,
// 	       routers_1_rdwr_req,
// 	       routers_1_rd_data,
// 	       routers_1_rdy_cnt,
// 	       routers_2_rd_data,
// 	       routers_2_rdy_cnt
// Sequenced before (restricted): routers_2_rdwr_req
//
// Method: routers_2_rdy_cnt
// Conflict-free: routers_0_rdwr_req,
// 	       routers_0_rd_data,
// 	       routers_0_rdy_cnt,
// 	       routers_1_rdwr_req,
// 	       routers_1_rd_data,
// 	       routers_1_rdy_cnt,
// 	       routers_2_rd_data,
// 	       routers_2_rdy_cnt
// Sequenced before (restricted): routers_2_rdwr_req
//
//
// Ports:
// Name                         I/O  size props
// routers_0_rd_data              O    32 reg
// routers_0_rdy_cnt              O     2 reg
// routers_1_rd_data              O    32 reg
// routers_1_rdy_cnt              O     2 reg
// routers_2_rd_data              O    32 reg
// routers_2_rdy_cnt              O     2 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// routers_0_address              I     2 reg
// routers_0_rd                   I     1
// routers_0_wr_data              I    32
// routers_0_wr                   I     1
// routers_1_address              I     2 reg
// routers_1_rd                   I     1
// routers_1_wr_data              I    32
// routers_1_wr                   I     1
// routers_2_address              I     2 reg
// routers_2_rd                   I     1
// routers_2_wr_data              I    32
// routers_2_wr                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkNoC3bs2(CLK,
		 RST_N,

		 routers_0_address,
		 routers_0_rd,
		 routers_0_wr_data,
		 routers_0_wr,

		 routers_0_rd_data,

		 routers_0_rdy_cnt,

		 routers_1_address,
		 routers_1_rd,
		 routers_1_wr_data,
		 routers_1_wr,

		 routers_1_rd_data,

		 routers_1_rdy_cnt,

		 routers_2_address,
		 routers_2_rd,
		 routers_2_wr_data,
		 routers_2_wr,

		 routers_2_rd_data,

		 routers_2_rdy_cnt);
  input  CLK;
  input  RST_N;

  // action method routers_0_rdwr_req
  input  [1 : 0] routers_0_address;
  input  routers_0_rd;
  input  [31 : 0] routers_0_wr_data;
  input  routers_0_wr;

  // value method routers_0_rd_data
  output [31 : 0] routers_0_rd_data;

  // value method routers_0_rdy_cnt
  output [1 : 0] routers_0_rdy_cnt;

  // action method routers_1_rdwr_req
  input  [1 : 0] routers_1_address;
  input  routers_1_rd;
  input  [31 : 0] routers_1_wr_data;
  input  routers_1_wr;

  // value method routers_1_rd_data
  output [31 : 0] routers_1_rd_data;

  // value method routers_1_rdy_cnt
  output [1 : 0] routers_1_rdy_cnt;

  // action method routers_2_rdwr_req
  input  [1 : 0] routers_2_address;
  input  routers_2_rd;
  input  [31 : 0] routers_2_wr_data;
  input  routers_2_wr;

  // value method routers_2_rd_data
  output [31 : 0] routers_2_rd_data;

  // value method routers_2_rdy_cnt
  output [1 : 0] routers_2_rdy_cnt;

  // signals for module outputs
  wire [31 : 0] routers_0_rd_data, routers_1_rd_data, routers_2_rd_data;
  wire [1 : 0] routers_0_rdy_cnt, routers_1_rdy_cnt, routers_2_rdy_cnt;

  // register noc_coms
  reg [35 : 0] noc_coms;
  reg [35 : 0] noc_coms$D_IN;
  wire noc_coms$EN;

  // register noc_coms_1
  reg [35 : 0] noc_coms_1;
  reg [35 : 0] noc_coms_1$D_IN;
  wire noc_coms_1$EN;

  // register noc_coms_2
  reg [35 : 0] noc_coms_2;
  reg [35 : 0] noc_coms_2$D_IN;
  wire noc_coms_2$EN;

  // register noc_routers_0_cnt
  reg [1 : 0] noc_routers_0_cnt;
  wire [1 : 0] noc_routers_0_cnt$D_IN;
  wire noc_routers_0_cnt$EN;

  // register noc_routers_0_node_dst
  reg [1 : 0] noc_routers_0_node_dst;
  wire [1 : 0] noc_routers_0_node_dst$D_IN;
  wire noc_routers_0_node_dst$EN;

  // register noc_routers_0_node_firstWord
  reg noc_routers_0_node_firstWord;
  wire noc_routers_0_node_firstWord$D_IN, noc_routers_0_node_firstWord$EN;

  // register noc_routers_0_node_flagEoD
  reg noc_routers_0_node_flagEoD;
  wire noc_routers_0_node_flagEoD$D_IN, noc_routers_0_node_flagEoD$EN;

  // register noc_routers_0_node_rcvCnt
  reg [7 : 0] noc_routers_0_node_rcvCnt;
  reg [7 : 0] noc_routers_0_node_rcvCnt$D_IN;
  wire noc_routers_0_node_rcvCnt$EN;

  // register noc_routers_0_node_rcvMore
  reg noc_routers_0_node_rcvMore;
  wire noc_routers_0_node_rcvMore$D_IN, noc_routers_0_node_rcvMore$EN;

  // register noc_routers_0_node_sending
  reg noc_routers_0_node_sending;
  wire noc_routers_0_node_sending$D_IN, noc_routers_0_node_sending$EN;

  // register noc_routers_0_node_slot
  reg [1 : 0] noc_routers_0_node_slot;
  wire [1 : 0] noc_routers_0_node_slot$D_IN;
  wire noc_routers_0_node_slot$EN;

  // register noc_routers_0_node_sndCnt
  reg [7 : 0] noc_routers_0_node_sndCnt;
  wire [7 : 0] noc_routers_0_node_sndCnt$D_IN;
  wire noc_routers_0_node_sndCnt$EN;

  // register noc_routers_0_node_src
  reg [1 : 0] noc_routers_0_node_src;
  wire [1 : 0] noc_routers_0_node_src$D_IN;
  wire noc_routers_0_node_src$EN;

  // register noc_routers_0_rdreq
  reg [1 : 0] noc_routers_0_rdreq;
  wire [1 : 0] noc_routers_0_rdreq$D_IN;
  wire noc_routers_0_rdreq$EN;

  // register noc_routers_0_res
  reg [31 : 0] noc_routers_0_res;
  reg [31 : 0] noc_routers_0_res$D_IN;
  wire noc_routers_0_res$EN;

  // register noc_routers_0_rnw
  reg noc_routers_0_rnw;
  wire noc_routers_0_rnw$D_IN, noc_routers_0_rnw$EN;

  // register noc_routers_0_wrreq
  reg [1 : 0] noc_routers_0_wrreq;
  wire [1 : 0] noc_routers_0_wrreq$D_IN;
  wire noc_routers_0_wrreq$EN;

  // register noc_routers_1_cnt
  reg [1 : 0] noc_routers_1_cnt;
  wire [1 : 0] noc_routers_1_cnt$D_IN;
  wire noc_routers_1_cnt$EN;

  // register noc_routers_1_node_dst
  reg [1 : 0] noc_routers_1_node_dst;
  wire [1 : 0] noc_routers_1_node_dst$D_IN;
  wire noc_routers_1_node_dst$EN;

  // register noc_routers_1_node_firstWord
  reg noc_routers_1_node_firstWord;
  wire noc_routers_1_node_firstWord$D_IN, noc_routers_1_node_firstWord$EN;

  // register noc_routers_1_node_flagEoD
  reg noc_routers_1_node_flagEoD;
  wire noc_routers_1_node_flagEoD$D_IN, noc_routers_1_node_flagEoD$EN;

  // register noc_routers_1_node_rcvCnt
  reg [7 : 0] noc_routers_1_node_rcvCnt;
  reg [7 : 0] noc_routers_1_node_rcvCnt$D_IN;
  wire noc_routers_1_node_rcvCnt$EN;

  // register noc_routers_1_node_rcvMore
  reg noc_routers_1_node_rcvMore;
  wire noc_routers_1_node_rcvMore$D_IN, noc_routers_1_node_rcvMore$EN;

  // register noc_routers_1_node_sending
  reg noc_routers_1_node_sending;
  wire noc_routers_1_node_sending$D_IN, noc_routers_1_node_sending$EN;

  // register noc_routers_1_node_slot
  reg [1 : 0] noc_routers_1_node_slot;
  wire [1 : 0] noc_routers_1_node_slot$D_IN;
  wire noc_routers_1_node_slot$EN;

  // register noc_routers_1_node_sndCnt
  reg [7 : 0] noc_routers_1_node_sndCnt;
  wire [7 : 0] noc_routers_1_node_sndCnt$D_IN;
  wire noc_routers_1_node_sndCnt$EN;

  // register noc_routers_1_node_src
  reg [1 : 0] noc_routers_1_node_src;
  wire [1 : 0] noc_routers_1_node_src$D_IN;
  wire noc_routers_1_node_src$EN;

  // register noc_routers_1_rdreq
  reg [1 : 0] noc_routers_1_rdreq;
  wire [1 : 0] noc_routers_1_rdreq$D_IN;
  wire noc_routers_1_rdreq$EN;

  // register noc_routers_1_res
  reg [31 : 0] noc_routers_1_res;
  reg [31 : 0] noc_routers_1_res$D_IN;
  wire noc_routers_1_res$EN;

  // register noc_routers_1_rnw
  reg noc_routers_1_rnw;
  wire noc_routers_1_rnw$D_IN, noc_routers_1_rnw$EN;

  // register noc_routers_1_wrreq
  reg [1 : 0] noc_routers_1_wrreq;
  wire [1 : 0] noc_routers_1_wrreq$D_IN;
  wire noc_routers_1_wrreq$EN;

  // register noc_routers_2_cnt
  reg [1 : 0] noc_routers_2_cnt;
  wire [1 : 0] noc_routers_2_cnt$D_IN;
  wire noc_routers_2_cnt$EN;

  // register noc_routers_2_node_dst
  reg [1 : 0] noc_routers_2_node_dst;
  wire [1 : 0] noc_routers_2_node_dst$D_IN;
  wire noc_routers_2_node_dst$EN;

  // register noc_routers_2_node_firstWord
  reg noc_routers_2_node_firstWord;
  wire noc_routers_2_node_firstWord$D_IN, noc_routers_2_node_firstWord$EN;

  // register noc_routers_2_node_flagEoD
  reg noc_routers_2_node_flagEoD;
  wire noc_routers_2_node_flagEoD$D_IN, noc_routers_2_node_flagEoD$EN;

  // register noc_routers_2_node_rcvCnt
  reg [7 : 0] noc_routers_2_node_rcvCnt;
  reg [7 : 0] noc_routers_2_node_rcvCnt$D_IN;
  wire noc_routers_2_node_rcvCnt$EN;

  // register noc_routers_2_node_rcvMore
  reg noc_routers_2_node_rcvMore;
  wire noc_routers_2_node_rcvMore$D_IN, noc_routers_2_node_rcvMore$EN;

  // register noc_routers_2_node_sending
  reg noc_routers_2_node_sending;
  wire noc_routers_2_node_sending$D_IN, noc_routers_2_node_sending$EN;

  // register noc_routers_2_node_slot
  reg [1 : 0] noc_routers_2_node_slot;
  wire [1 : 0] noc_routers_2_node_slot$D_IN;
  wire noc_routers_2_node_slot$EN;

  // register noc_routers_2_node_sndCnt
  reg [7 : 0] noc_routers_2_node_sndCnt;
  wire [7 : 0] noc_routers_2_node_sndCnt$D_IN;
  wire noc_routers_2_node_sndCnt$EN;

  // register noc_routers_2_node_src
  reg [1 : 0] noc_routers_2_node_src;
  wire [1 : 0] noc_routers_2_node_src$D_IN;
  wire noc_routers_2_node_src$EN;

  // register noc_routers_2_rdreq
  reg [1 : 0] noc_routers_2_rdreq;
  wire [1 : 0] noc_routers_2_rdreq$D_IN;
  wire noc_routers_2_rdreq$EN;

  // register noc_routers_2_res
  reg [31 : 0] noc_routers_2_res;
  reg [31 : 0] noc_routers_2_res$D_IN;
  wire noc_routers_2_res$EN;

  // register noc_routers_2_rnw
  reg noc_routers_2_rnw;
  wire noc_routers_2_rnw$D_IN, noc_routers_2_rnw$EN;

  // register noc_routers_2_wrreq
  reg [1 : 0] noc_routers_2_wrreq;
  wire [1 : 0] noc_routers_2_wrreq$D_IN;
  wire noc_routers_2_wrreq$EN;

  // ports of submodule noc_routers_0_node_rcvFIFO
  wire [31 : 0] noc_routers_0_node_rcvFIFO$D_IN,
		noc_routers_0_node_rcvFIFO$D_OUT;
  wire noc_routers_0_node_rcvFIFO$CLR,
       noc_routers_0_node_rcvFIFO$DEQ,
       noc_routers_0_node_rcvFIFO$EMPTY_N,
       noc_routers_0_node_rcvFIFO$ENQ,
       noc_routers_0_node_rcvFIFO$FULL_N;

  // ports of submodule noc_routers_0_node_sndFIFO
  wire [31 : 0] noc_routers_0_node_sndFIFO$D_IN,
		noc_routers_0_node_sndFIFO$D_OUT;
  wire noc_routers_0_node_sndFIFO$CLR,
       noc_routers_0_node_sndFIFO$DEQ,
       noc_routers_0_node_sndFIFO$EMPTY_N,
       noc_routers_0_node_sndFIFO$ENQ,
       noc_routers_0_node_sndFIFO$FULL_N;

  // ports of submodule noc_routers_1_node_rcvFIFO
  wire [31 : 0] noc_routers_1_node_rcvFIFO$D_IN,
		noc_routers_1_node_rcvFIFO$D_OUT;
  wire noc_routers_1_node_rcvFIFO$CLR,
       noc_routers_1_node_rcvFIFO$DEQ,
       noc_routers_1_node_rcvFIFO$EMPTY_N,
       noc_routers_1_node_rcvFIFO$ENQ,
       noc_routers_1_node_rcvFIFO$FULL_N;

  // ports of submodule noc_routers_1_node_sndFIFO
  wire [31 : 0] noc_routers_1_node_sndFIFO$D_IN,
		noc_routers_1_node_sndFIFO$D_OUT;
  wire noc_routers_1_node_sndFIFO$CLR,
       noc_routers_1_node_sndFIFO$DEQ,
       noc_routers_1_node_sndFIFO$EMPTY_N,
       noc_routers_1_node_sndFIFO$ENQ,
       noc_routers_1_node_sndFIFO$FULL_N;

  // ports of submodule noc_routers_2_node_rcvFIFO
  wire [31 : 0] noc_routers_2_node_rcvFIFO$D_IN,
		noc_routers_2_node_rcvFIFO$D_OUT;
  wire noc_routers_2_node_rcvFIFO$CLR,
       noc_routers_2_node_rcvFIFO$DEQ,
       noc_routers_2_node_rcvFIFO$EMPTY_N,
       noc_routers_2_node_rcvFIFO$ENQ,
       noc_routers_2_node_rcvFIFO$FULL_N;

  // ports of submodule noc_routers_2_node_sndFIFO
  wire [31 : 0] noc_routers_2_node_sndFIFO$D_IN,
		noc_routers_2_node_sndFIFO$D_OUT;
  wire noc_routers_2_node_sndFIFO$CLR,
       noc_routers_2_node_sndFIFO$DEQ,
       noc_routers_2_node_sndFIFO$EMPTY_N,
       noc_routers_2_node_sndFIFO$ENQ,
       noc_routers_2_node_sndFIFO$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_noc_routers_0_do_readRcvCount,
       WILL_FIRE_RL_noc_routers_0_do_readRcvSource,
       WILL_FIRE_RL_noc_routers_0_do_readStatus,
       WILL_FIRE_RL_noc_routers_0_do_writeReset,
       WILL_FIRE_RL_noc_routers_0_do_writeSndCount,
       WILL_FIRE_RL_noc_routers_0_do_writeSndData,
       WILL_FIRE_RL_noc_routers_0_do_writeSndDest,
       WILL_FIRE_RL_noc_routers_0_node_continueRcv,
       WILL_FIRE_RL_noc_routers_0_node_defaultNil,
       WILL_FIRE_RL_noc_routers_0_node_detectRcvStart,
       WILL_FIRE_RL_noc_routers_0_node_detectSndStart,
       WILL_FIRE_RL_noc_routers_0_node_justForward,
       WILL_FIRE_RL_noc_routers_0_node_waitLastAck,
       WILL_FIRE_RL_noc_routers_0_waitRcvData,
       WILL_FIRE_RL_noc_routers_1_do_readRcvCount,
       WILL_FIRE_RL_noc_routers_1_do_readRcvSource,
       WILL_FIRE_RL_noc_routers_1_do_readStatus,
       WILL_FIRE_RL_noc_routers_1_do_writeReset,
       WILL_FIRE_RL_noc_routers_1_do_writeSndCount,
       WILL_FIRE_RL_noc_routers_1_do_writeSndData,
       WILL_FIRE_RL_noc_routers_1_do_writeSndDest,
       WILL_FIRE_RL_noc_routers_1_node_continueRcv,
       WILL_FIRE_RL_noc_routers_1_node_defaultNil,
       WILL_FIRE_RL_noc_routers_1_node_detectRcvStart,
       WILL_FIRE_RL_noc_routers_1_node_detectSndStart,
       WILL_FIRE_RL_noc_routers_1_node_justForward,
       WILL_FIRE_RL_noc_routers_1_node_waitLastAck,
       WILL_FIRE_RL_noc_routers_1_waitRcvData,
       WILL_FIRE_RL_noc_routers_2_do_readRcvCount,
       WILL_FIRE_RL_noc_routers_2_do_readRcvSource,
       WILL_FIRE_RL_noc_routers_2_do_readStatus,
       WILL_FIRE_RL_noc_routers_2_do_writeReset,
       WILL_FIRE_RL_noc_routers_2_do_writeSndCount,
       WILL_FIRE_RL_noc_routers_2_do_writeSndData,
       WILL_FIRE_RL_noc_routers_2_do_writeSndDest,
       WILL_FIRE_RL_noc_routers_2_node_continueRcv,
       WILL_FIRE_RL_noc_routers_2_node_defaultNil,
       WILL_FIRE_RL_noc_routers_2_node_detectRcvStart,
       WILL_FIRE_RL_noc_routers_2_node_detectSndStart,
       WILL_FIRE_RL_noc_routers_2_node_justForward,
       WILL_FIRE_RL_noc_routers_2_node_waitLastAck,
       WILL_FIRE_RL_noc_routers_2_waitRcvData;

  // inputs to muxes for submodule ports
  wire [35 : 0] MUX_noc_coms$write_1__VAL_1,
		MUX_noc_coms$write_1__VAL_2,
		MUX_noc_coms_1$write_1__VAL_1,
		MUX_noc_coms_1$write_1__VAL_2,
		MUX_noc_coms_2$write_1__VAL_1,
		MUX_noc_coms_2$write_1__VAL_2;
  wire [31 : 0] MUX_noc_routers_0_res$write_1__VAL_3,
		MUX_noc_routers_0_res$write_1__VAL_4,
		MUX_noc_routers_0_res$write_1__VAL_5,
		MUX_noc_routers_1_res$write_1__VAL_3,
		MUX_noc_routers_1_res$write_1__VAL_4,
		MUX_noc_routers_1_res$write_1__VAL_5,
		MUX_noc_routers_2_res$write_1__VAL_3,
		MUX_noc_routers_2_res$write_1__VAL_4,
		MUX_noc_routers_2_res$write_1__VAL_5;
  wire [7 : 0] MUX_noc_routers_0_node_rcvCnt$write_1__VAL_1,
	       MUX_noc_routers_0_node_sndCnt$write_1__VAL_2,
	       MUX_noc_routers_1_node_rcvCnt$write_1__VAL_1,
	       MUX_noc_routers_1_node_sndCnt$write_1__VAL_2,
	       MUX_noc_routers_2_node_rcvCnt$write_1__VAL_1,
	       MUX_noc_routers_2_node_sndCnt$write_1__VAL_2;
  wire MUX_noc_coms$write_1__SEL_2,
       MUX_noc_coms$write_1__SEL_4,
       MUX_noc_coms_1$write_1__SEL_2,
       MUX_noc_coms_1$write_1__SEL_4,
       MUX_noc_coms_2$write_1__SEL_2,
       MUX_noc_coms_2$write_1__SEL_4,
       MUX_noc_routers_0_cnt$write_1__SEL_1,
       MUX_noc_routers_0_node_flagEoD$write_1__SEL_2,
       MUX_noc_routers_0_res$write_1__SEL_1,
       MUX_noc_routers_1_cnt$write_1__SEL_1,
       MUX_noc_routers_1_node_flagEoD$write_1__SEL_2,
       MUX_noc_routers_1_res$write_1__SEL_1,
       MUX_noc_routers_2_cnt$write_1__SEL_1,
       MUX_noc_routers_2_node_flagEoD$write_1__SEL_2,
       MUX_noc_routers_2_res$write_1__SEL_1;

  // remaining internal signals
  wire [15 : 0] x__h3034, x__h5867, x__h8692;
  wire [7 : 0] statusByte__h3007,
	       statusByte__h5840,
	       statusByte__h8665,
	       x__h1397,
	       x__h4242,
	       x__h7067;
  wire noc_routers_0_node_slot_82_EQ_0_86_AND_noc_rou_ETC___d328,
       noc_routers_1_node_slot_70_EQ_1_74_AND_noc_rou_ETC___d216,
       noc_routers_2_node_slot_7_EQ_2_1_AND_noc_route_ETC___d104;

  // value method routers_0_rd_data
  assign routers_0_rd_data = noc_routers_0_res ;

  // value method routers_0_rdy_cnt
  assign routers_0_rdy_cnt = noc_routers_0_cnt ;

  // value method routers_1_rd_data
  assign routers_1_rd_data = noc_routers_1_res ;

  // value method routers_1_rdy_cnt
  assign routers_1_rdy_cnt = noc_routers_1_cnt ;

  // value method routers_2_rd_data
  assign routers_2_rd_data = noc_routers_2_res ;

  // value method routers_2_rdy_cnt
  assign routers_2_rdy_cnt = noc_routers_2_cnt ;

  // submodule noc_routers_0_node_rcvFIFO
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) noc_routers_0_node_rcvFIFO(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(noc_routers_0_node_rcvFIFO$D_IN),
						      .ENQ(noc_routers_0_node_rcvFIFO$ENQ),
						      .DEQ(noc_routers_0_node_rcvFIFO$DEQ),
						      .CLR(noc_routers_0_node_rcvFIFO$CLR),
						      .D_OUT(noc_routers_0_node_rcvFIFO$D_OUT),
						      .FULL_N(noc_routers_0_node_rcvFIFO$FULL_N),
						      .EMPTY_N(noc_routers_0_node_rcvFIFO$EMPTY_N));

  // submodule noc_routers_0_node_sndFIFO
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) noc_routers_0_node_sndFIFO(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(noc_routers_0_node_sndFIFO$D_IN),
						      .ENQ(noc_routers_0_node_sndFIFO$ENQ),
						      .DEQ(noc_routers_0_node_sndFIFO$DEQ),
						      .CLR(noc_routers_0_node_sndFIFO$CLR),
						      .D_OUT(noc_routers_0_node_sndFIFO$D_OUT),
						      .FULL_N(noc_routers_0_node_sndFIFO$FULL_N),
						      .EMPTY_N(noc_routers_0_node_sndFIFO$EMPTY_N));

  // submodule noc_routers_1_node_rcvFIFO
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) noc_routers_1_node_rcvFIFO(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(noc_routers_1_node_rcvFIFO$D_IN),
						      .ENQ(noc_routers_1_node_rcvFIFO$ENQ),
						      .DEQ(noc_routers_1_node_rcvFIFO$DEQ),
						      .CLR(noc_routers_1_node_rcvFIFO$CLR),
						      .D_OUT(noc_routers_1_node_rcvFIFO$D_OUT),
						      .FULL_N(noc_routers_1_node_rcvFIFO$FULL_N),
						      .EMPTY_N(noc_routers_1_node_rcvFIFO$EMPTY_N));

  // submodule noc_routers_1_node_sndFIFO
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) noc_routers_1_node_sndFIFO(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(noc_routers_1_node_sndFIFO$D_IN),
						      .ENQ(noc_routers_1_node_sndFIFO$ENQ),
						      .DEQ(noc_routers_1_node_sndFIFO$DEQ),
						      .CLR(noc_routers_1_node_sndFIFO$CLR),
						      .D_OUT(noc_routers_1_node_sndFIFO$D_OUT),
						      .FULL_N(noc_routers_1_node_sndFIFO$FULL_N),
						      .EMPTY_N(noc_routers_1_node_sndFIFO$EMPTY_N));

  // submodule noc_routers_2_node_rcvFIFO
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) noc_routers_2_node_rcvFIFO(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(noc_routers_2_node_rcvFIFO$D_IN),
						      .ENQ(noc_routers_2_node_rcvFIFO$ENQ),
						      .DEQ(noc_routers_2_node_rcvFIFO$DEQ),
						      .CLR(noc_routers_2_node_rcvFIFO$CLR),
						      .D_OUT(noc_routers_2_node_rcvFIFO$D_OUT),
						      .FULL_N(noc_routers_2_node_rcvFIFO$FULL_N),
						      .EMPTY_N(noc_routers_2_node_rcvFIFO$EMPTY_N));

  // submodule noc_routers_2_node_sndFIFO
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) noc_routers_2_node_sndFIFO(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(noc_routers_2_node_sndFIFO$D_IN),
						      .ENQ(noc_routers_2_node_sndFIFO$ENQ),
						      .DEQ(noc_routers_2_node_sndFIFO$DEQ),
						      .CLR(noc_routers_2_node_sndFIFO$CLR),
						      .D_OUT(noc_routers_2_node_sndFIFO$D_OUT),
						      .FULL_N(noc_routers_2_node_sndFIFO$FULL_N),
						      .EMPTY_N(noc_routers_2_node_sndFIFO$EMPTY_N));

  // rule RL_noc_routers_0_node_defaultNil
  assign WILL_FIRE_RL_noc_routers_0_node_defaultNil =
	     noc_routers_0_node_slot == 2'd0 && !noc_routers_0_node_sending ;

  // rule RL_noc_routers_0_do_writeSndData
  assign WILL_FIRE_RL_noc_routers_0_do_writeSndData =
	     noc_routers_0_node_sndFIFO$FULL_N && noc_routers_0_cnt != 2'd0 &&
	     !noc_routers_0_rnw &&
	     noc_routers_0_wrreq == 2'd3 ;

  // rule RL_noc_routers_0_do_readRcvCount
  assign WILL_FIRE_RL_noc_routers_0_do_readRcvCount =
	     noc_routers_0_cnt != 2'd0 && noc_routers_0_rnw &&
	     noc_routers_0_rdreq == 2'd1 ;

  // rule RL_noc_routers_0_do_readRcvSource
  assign WILL_FIRE_RL_noc_routers_0_do_readRcvSource =
	     noc_routers_0_cnt != 2'd0 && noc_routers_0_rnw &&
	     noc_routers_0_rdreq == 2'd2 ;

  // rule RL_noc_routers_0_do_readStatus
  assign WILL_FIRE_RL_noc_routers_0_do_readStatus =
	     noc_routers_0_cnt != 2'd0 && noc_routers_0_rnw &&
	     noc_routers_0_rdreq == 2'd0 ;

  // rule RL_noc_routers_0_node_detectSndStart
  assign WILL_FIRE_RL_noc_routers_0_node_detectSndStart =
	     noc_routers_0_node_sndFIFO$EMPTY_N &&
	     noc_routers_0_node_slot_82_EQ_0_86_AND_noc_rou_ETC___d328 ;

  // rule RL_noc_routers_0_node_waitLastAck
  assign WILL_FIRE_RL_noc_routers_0_node_waitLastAck =
	     noc_routers_0_node_slot == 2'd0 &&
	     noc_routers_0_node_sndCnt == 8'd0 &&
	     noc_routers_0_node_sending &&
	     !noc_routers_0_node_firstWord &&
	     noc_coms[33:32] == 2'd2 ;

  // rule RL_noc_routers_0_node_detectRcvStart
  assign WILL_FIRE_RL_noc_routers_0_node_detectRcvStart =
	     noc_routers_0_node_rcvFIFO$FULL_N &&
	     noc_routers_0_node_slot != 2'd0 &&
	     noc_coms[35:34] == 2'd0 &&
	     noc_routers_0_node_rcvCnt == 8'd0 &&
	     !noc_routers_0_node_flagEoD &&
	     (noc_coms[33:32] == 2'd1 || noc_coms[33:32] == 2'd3) &&
	     !noc_routers_0_node_rcvMore ;

  // rule RL_noc_routers_0_node_continueRcv
  assign WILL_FIRE_RL_noc_routers_0_node_continueRcv =
	     noc_routers_0_node_rcvFIFO$FULL_N &&
	     noc_routers_0_node_slot != 2'd0 &&
	     noc_routers_0_node_slot == noc_routers_0_node_src &&
	     (noc_coms[33:32] == 2'd1 || noc_coms[33:32] == 2'd3) &&
	     noc_routers_0_node_rcvMore ;

  // rule RL_noc_routers_0_do_writeSndDest
  assign WILL_FIRE_RL_noc_routers_0_do_writeSndDest =
	     noc_routers_0_cnt != 2'd0 && !noc_routers_0_rnw &&
	     noc_routers_0_wrreq == 2'd2 ;

  // rule RL_noc_routers_0_do_writeSndCount
  assign WILL_FIRE_RL_noc_routers_0_do_writeSndCount =
	     noc_routers_0_cnt != 2'd0 && !noc_routers_0_rnw &&
	     noc_routers_0_wrreq == 2'd1 ;

  // rule RL_noc_routers_0_do_writeReset
  assign WILL_FIRE_RL_noc_routers_0_do_writeReset =
	     noc_routers_0_cnt != 2'd0 && !noc_routers_0_rnw &&
	     noc_routers_0_wrreq == 2'd0 ;

  // rule RL_noc_routers_0_waitRcvData
  assign WILL_FIRE_RL_noc_routers_0_waitRcvData =
	     noc_routers_0_node_rcvFIFO$EMPTY_N &&
	     noc_routers_0_cnt != 2'd0 &&
	     noc_routers_0_rnw &&
	     noc_routers_0_rdreq == 2'd3 &&
	     !WILL_FIRE_RL_noc_routers_0_node_detectRcvStart &&
	     !WILL_FIRE_RL_noc_routers_0_node_continueRcv ;

  // rule RL_noc_routers_1_node_defaultNil
  assign WILL_FIRE_RL_noc_routers_1_node_defaultNil =
	     noc_routers_1_node_slot == 2'd1 && !noc_routers_1_node_sending ;

  // rule RL_noc_routers_1_do_writeSndData
  assign WILL_FIRE_RL_noc_routers_1_do_writeSndData =
	     noc_routers_1_node_sndFIFO$FULL_N && noc_routers_1_cnt != 2'd0 &&
	     !noc_routers_1_rnw &&
	     noc_routers_1_wrreq == 2'd3 ;

  // rule RL_noc_routers_1_do_readRcvCount
  assign WILL_FIRE_RL_noc_routers_1_do_readRcvCount =
	     noc_routers_1_cnt != 2'd0 && noc_routers_1_rnw &&
	     noc_routers_1_rdreq == 2'd1 ;

  // rule RL_noc_routers_1_do_readRcvSource
  assign WILL_FIRE_RL_noc_routers_1_do_readRcvSource =
	     noc_routers_1_cnt != 2'd0 && noc_routers_1_rnw &&
	     noc_routers_1_rdreq == 2'd2 ;

  // rule RL_noc_routers_1_do_readStatus
  assign WILL_FIRE_RL_noc_routers_1_do_readStatus =
	     noc_routers_1_cnt != 2'd0 && noc_routers_1_rnw &&
	     noc_routers_1_rdreq == 2'd0 ;

  // rule RL_noc_routers_1_node_detectSndStart
  assign WILL_FIRE_RL_noc_routers_1_node_detectSndStart =
	     noc_routers_1_node_sndFIFO$EMPTY_N &&
	     noc_routers_1_node_slot_70_EQ_1_74_AND_noc_rou_ETC___d216 ;

  // rule RL_noc_routers_1_node_waitLastAck
  assign WILL_FIRE_RL_noc_routers_1_node_waitLastAck =
	     noc_routers_1_node_slot == 2'd1 &&
	     noc_routers_1_node_sndCnt == 8'd0 &&
	     noc_routers_1_node_sending &&
	     !noc_routers_1_node_firstWord &&
	     noc_coms_1[33:32] == 2'd2 ;

  // rule RL_noc_routers_1_node_detectRcvStart
  assign WILL_FIRE_RL_noc_routers_1_node_detectRcvStart =
	     noc_routers_1_node_rcvFIFO$FULL_N &&
	     noc_routers_1_node_slot != 2'd1 &&
	     noc_coms_1[35:34] == 2'd1 &&
	     noc_routers_1_node_rcvCnt == 8'd0 &&
	     !noc_routers_1_node_flagEoD &&
	     (noc_coms_1[33:32] == 2'd1 || noc_coms_1[33:32] == 2'd3) &&
	     !noc_routers_1_node_rcvMore ;

  // rule RL_noc_routers_1_node_continueRcv
  assign WILL_FIRE_RL_noc_routers_1_node_continueRcv =
	     noc_routers_1_node_rcvFIFO$FULL_N &&
	     noc_routers_1_node_slot != 2'd1 &&
	     noc_routers_1_node_slot == noc_routers_1_node_src &&
	     (noc_coms_1[33:32] == 2'd1 || noc_coms_1[33:32] == 2'd3) &&
	     noc_routers_1_node_rcvMore ;

  // rule RL_noc_routers_1_do_writeSndDest
  assign WILL_FIRE_RL_noc_routers_1_do_writeSndDest =
	     noc_routers_1_cnt != 2'd0 && !noc_routers_1_rnw &&
	     noc_routers_1_wrreq == 2'd2 ;

  // rule RL_noc_routers_1_do_writeSndCount
  assign WILL_FIRE_RL_noc_routers_1_do_writeSndCount =
	     noc_routers_1_cnt != 2'd0 && !noc_routers_1_rnw &&
	     noc_routers_1_wrreq == 2'd1 ;

  // rule RL_noc_routers_1_do_writeReset
  assign WILL_FIRE_RL_noc_routers_1_do_writeReset =
	     noc_routers_1_cnt != 2'd0 && !noc_routers_1_rnw &&
	     noc_routers_1_wrreq == 2'd0 ;

  // rule RL_noc_routers_1_waitRcvData
  assign WILL_FIRE_RL_noc_routers_1_waitRcvData =
	     noc_routers_1_node_rcvFIFO$EMPTY_N &&
	     noc_routers_1_cnt != 2'd0 &&
	     noc_routers_1_rnw &&
	     noc_routers_1_rdreq == 2'd3 &&
	     !WILL_FIRE_RL_noc_routers_1_node_continueRcv &&
	     !WILL_FIRE_RL_noc_routers_1_node_detectRcvStart ;

  // rule RL_noc_routers_2_node_defaultNil
  assign WILL_FIRE_RL_noc_routers_2_node_defaultNil =
	     noc_routers_2_node_slot == 2'd2 && !noc_routers_2_node_sending ;

  // rule RL_noc_routers_2_do_writeSndData
  assign WILL_FIRE_RL_noc_routers_2_do_writeSndData =
	     noc_routers_2_node_sndFIFO$FULL_N && noc_routers_2_cnt != 2'd0 &&
	     !noc_routers_2_rnw &&
	     noc_routers_2_wrreq == 2'd3 ;

  // rule RL_noc_routers_2_do_readRcvCount
  assign WILL_FIRE_RL_noc_routers_2_do_readRcvCount =
	     noc_routers_2_cnt != 2'd0 && noc_routers_2_rnw &&
	     noc_routers_2_rdreq == 2'd1 ;

  // rule RL_noc_routers_2_do_readRcvSource
  assign WILL_FIRE_RL_noc_routers_2_do_readRcvSource =
	     noc_routers_2_cnt != 2'd0 && noc_routers_2_rnw &&
	     noc_routers_2_rdreq == 2'd2 ;

  // rule RL_noc_routers_2_do_readStatus
  assign WILL_FIRE_RL_noc_routers_2_do_readStatus =
	     noc_routers_2_cnt != 2'd0 && noc_routers_2_rnw &&
	     noc_routers_2_rdreq == 2'd0 ;

  // rule RL_noc_routers_2_node_detectSndStart
  assign WILL_FIRE_RL_noc_routers_2_node_detectSndStart =
	     noc_routers_2_node_sndFIFO$EMPTY_N &&
	     noc_routers_2_node_slot_7_EQ_2_1_AND_noc_route_ETC___d104 ;

  // rule RL_noc_routers_2_node_waitLastAck
  assign WILL_FIRE_RL_noc_routers_2_node_waitLastAck =
	     noc_routers_2_node_slot == 2'd2 &&
	     noc_routers_2_node_sndCnt == 8'd0 &&
	     noc_routers_2_node_sending &&
	     !noc_routers_2_node_firstWord &&
	     noc_coms_2[33:32] == 2'd2 ;

  // rule RL_noc_routers_2_node_detectRcvStart
  assign WILL_FIRE_RL_noc_routers_2_node_detectRcvStart =
	     noc_routers_2_node_rcvFIFO$FULL_N &&
	     noc_routers_2_node_slot != 2'd2 &&
	     noc_coms_2[35:34] == 2'd2 &&
	     noc_routers_2_node_rcvCnt == 8'd0 &&
	     !noc_routers_2_node_flagEoD &&
	     (noc_coms_2[33:32] == 2'd1 || noc_coms_2[33:32] == 2'd3) &&
	     !noc_routers_2_node_rcvMore ;

  // rule RL_noc_routers_2_node_continueRcv
  assign WILL_FIRE_RL_noc_routers_2_node_continueRcv =
	     noc_routers_2_node_rcvFIFO$FULL_N &&
	     noc_routers_2_node_slot != 2'd2 &&
	     noc_routers_2_node_slot == noc_routers_2_node_src &&
	     (noc_coms_2[33:32] == 2'd1 || noc_coms_2[33:32] == 2'd3) &&
	     noc_routers_2_node_rcvMore ;

  // rule RL_noc_routers_2_do_writeSndDest
  assign WILL_FIRE_RL_noc_routers_2_do_writeSndDest =
	     noc_routers_2_cnt != 2'd0 && !noc_routers_2_rnw &&
	     noc_routers_2_wrreq == 2'd2 ;

  // rule RL_noc_routers_2_do_writeSndCount
  assign WILL_FIRE_RL_noc_routers_2_do_writeSndCount =
	     noc_routers_2_cnt != 2'd0 && !noc_routers_2_rnw &&
	     noc_routers_2_wrreq == 2'd1 ;

  // rule RL_noc_routers_2_do_writeReset
  assign WILL_FIRE_RL_noc_routers_2_do_writeReset =
	     noc_routers_2_cnt != 2'd0 && !noc_routers_2_rnw &&
	     noc_routers_2_wrreq == 2'd0 ;

  // rule RL_noc_routers_2_waitRcvData
  assign WILL_FIRE_RL_noc_routers_2_waitRcvData =
	     noc_routers_2_node_rcvFIFO$EMPTY_N &&
	     noc_routers_2_cnt != 2'd0 &&
	     noc_routers_2_rnw &&
	     noc_routers_2_rdreq == 2'd3 &&
	     !WILL_FIRE_RL_noc_routers_2_node_continueRcv &&
	     !WILL_FIRE_RL_noc_routers_2_node_detectRcvStart ;

  // rule RL_noc_routers_0_node_justForward
  assign WILL_FIRE_RL_noc_routers_0_node_justForward =
	     !WILL_FIRE_RL_noc_routers_0_node_detectRcvStart &&
	     !WILL_FIRE_RL_noc_routers_0_node_continueRcv &&
	     !WILL_FIRE_RL_noc_routers_0_node_defaultNil &&
	     !WILL_FIRE_RL_noc_routers_0_node_waitLastAck &&
	     !WILL_FIRE_RL_noc_routers_0_node_detectSndStart ;

  // rule RL_noc_routers_1_node_justForward
  assign WILL_FIRE_RL_noc_routers_1_node_justForward =
	     !WILL_FIRE_RL_noc_routers_1_node_continueRcv &&
	     !WILL_FIRE_RL_noc_routers_1_node_detectRcvStart &&
	     !WILL_FIRE_RL_noc_routers_1_node_defaultNil &&
	     !WILL_FIRE_RL_noc_routers_1_node_waitLastAck &&
	     !WILL_FIRE_RL_noc_routers_1_node_detectSndStart ;

  // rule RL_noc_routers_2_node_justForward
  assign WILL_FIRE_RL_noc_routers_2_node_justForward =
	     !WILL_FIRE_RL_noc_routers_2_node_continueRcv &&
	     !WILL_FIRE_RL_noc_routers_2_node_detectRcvStart &&
	     !WILL_FIRE_RL_noc_routers_2_node_defaultNil &&
	     !WILL_FIRE_RL_noc_routers_2_node_waitLastAck &&
	     !WILL_FIRE_RL_noc_routers_2_node_detectSndStart ;

  // inputs to muxes for submodule ports
  assign MUX_noc_coms$write_1__SEL_2 =
	     WILL_FIRE_RL_noc_routers_2_node_continueRcv ||
	     WILL_FIRE_RL_noc_routers_2_node_detectRcvStart ;
  assign MUX_noc_coms$write_1__SEL_4 =
	     WILL_FIRE_RL_noc_routers_2_node_defaultNil ||
	     WILL_FIRE_RL_noc_routers_2_node_waitLastAck ;
  assign MUX_noc_coms_1$write_1__SEL_2 =
	     WILL_FIRE_RL_noc_routers_0_node_continueRcv ||
	     WILL_FIRE_RL_noc_routers_0_node_detectRcvStart ;
  assign MUX_noc_coms_1$write_1__SEL_4 =
	     WILL_FIRE_RL_noc_routers_0_node_defaultNil ||
	     WILL_FIRE_RL_noc_routers_0_node_waitLastAck ;
  assign MUX_noc_coms_2$write_1__SEL_2 =
	     WILL_FIRE_RL_noc_routers_1_node_continueRcv ||
	     WILL_FIRE_RL_noc_routers_1_node_detectRcvStart ;
  assign MUX_noc_coms_2$write_1__SEL_4 =
	     WILL_FIRE_RL_noc_routers_1_node_defaultNil ||
	     WILL_FIRE_RL_noc_routers_1_node_waitLastAck ;
  assign MUX_noc_routers_0_cnt$write_1__SEL_1 = routers_0_rd || routers_0_wr ;
  assign MUX_noc_routers_0_node_flagEoD$write_1__SEL_2 =
	     WILL_FIRE_RL_noc_routers_0_node_continueRcv &&
	     noc_coms[33:32] == 2'd3 ;
  assign MUX_noc_routers_0_res$write_1__SEL_1 =
	     routers_0_wr && !routers_0_rd ;
  assign MUX_noc_routers_1_cnt$write_1__SEL_1 = routers_1_rd || routers_1_wr ;
  assign MUX_noc_routers_1_node_flagEoD$write_1__SEL_2 =
	     WILL_FIRE_RL_noc_routers_1_node_continueRcv &&
	     noc_coms_1[33:32] == 2'd3 ;
  assign MUX_noc_routers_1_res$write_1__SEL_1 =
	     routers_1_wr && !routers_1_rd ;
  assign MUX_noc_routers_2_cnt$write_1__SEL_1 = routers_2_rd || routers_2_wr ;
  assign MUX_noc_routers_2_node_flagEoD$write_1__SEL_2 =
	     WILL_FIRE_RL_noc_routers_2_node_continueRcv &&
	     noc_coms_2[33:32] == 2'd3 ;
  assign MUX_noc_routers_2_res$write_1__SEL_1 =
	     routers_2_wr && !routers_2_rd ;
  assign MUX_noc_coms$write_1__VAL_2 =
	     { noc_coms_2[35:34], 2'd2, noc_coms_2[31:0] } ;
  assign MUX_noc_coms$write_1__VAL_1 =
	     { noc_routers_2_node_dst,
	       (noc_routers_2_node_sndCnt == 8'd1) ? 2'd3 : 2'd1,
	       noc_routers_2_node_sndFIFO$D_OUT } ;
  assign MUX_noc_coms_1$write_1__VAL_1 =
	     { noc_routers_0_node_dst,
	       (noc_routers_0_node_sndCnt == 8'd1) ? 2'd3 : 2'd1,
	       noc_routers_0_node_sndFIFO$D_OUT } ;
  assign MUX_noc_coms_1$write_1__VAL_2 =
	     { noc_coms[35:34], 2'd2, noc_coms[31:0] } ;
  assign MUX_noc_coms_2$write_1__VAL_1 =
	     { noc_routers_1_node_dst,
	       (noc_routers_1_node_sndCnt == 8'd1) ? 2'd3 : 2'd1,
	       noc_routers_1_node_sndFIFO$D_OUT } ;
  assign MUX_noc_coms_2$write_1__VAL_2 =
	     { noc_coms_1[35:34], 2'd2, noc_coms_1[31:0] } ;
  assign MUX_noc_routers_0_node_rcvCnt$write_1__VAL_1 =
	     noc_routers_0_node_rcvCnt - 8'd1 ;
  assign MUX_noc_routers_0_node_sndCnt$write_1__VAL_2 =
	     noc_routers_0_node_sndCnt - 8'd1 ;
  assign MUX_noc_routers_0_res$write_1__VAL_3 = { 16'd0, x__h3034 } ;
  assign MUX_noc_routers_0_res$write_1__VAL_5 =
	     { 24'd0, noc_routers_0_node_rcvCnt } ;
  assign MUX_noc_routers_0_res$write_1__VAL_4 =
	     { 30'd0, noc_routers_0_node_src } ;
  assign MUX_noc_routers_1_node_rcvCnt$write_1__VAL_1 =
	     noc_routers_1_node_rcvCnt - 8'd1 ;
  assign MUX_noc_routers_1_node_sndCnt$write_1__VAL_2 =
	     noc_routers_1_node_sndCnt - 8'd1 ;
  assign MUX_noc_routers_1_res$write_1__VAL_3 = { 16'd0, x__h5867 } ;
  assign MUX_noc_routers_1_res$write_1__VAL_4 =
	     { 30'd0, noc_routers_1_node_src } ;
  assign MUX_noc_routers_1_res$write_1__VAL_5 =
	     { 24'd0, noc_routers_1_node_rcvCnt } ;
  assign MUX_noc_routers_2_node_rcvCnt$write_1__VAL_1 =
	     noc_routers_2_node_rcvCnt - 8'd1 ;
  assign MUX_noc_routers_2_node_sndCnt$write_1__VAL_2 =
	     noc_routers_2_node_sndCnt - 8'd1 ;
  assign MUX_noc_routers_2_res$write_1__VAL_3 = { 16'd0, x__h8692 } ;
  assign MUX_noc_routers_2_res$write_1__VAL_5 =
	     { 24'd0, noc_routers_2_node_rcvCnt } ;
  assign MUX_noc_routers_2_res$write_1__VAL_4 =
	     { 30'd0, noc_routers_2_node_src } ;

  // register noc_coms
  always@(WILL_FIRE_RL_noc_routers_2_node_detectSndStart or
	  MUX_noc_coms$write_1__VAL_1 or
	  MUX_noc_coms$write_1__SEL_2 or
	  MUX_noc_coms$write_1__VAL_2 or
	  WILL_FIRE_RL_noc_routers_2_node_justForward or
	  noc_coms_2 or MUX_noc_coms$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_noc_routers_2_node_detectSndStart:
	  noc_coms$D_IN = MUX_noc_coms$write_1__VAL_1;
      MUX_noc_coms$write_1__SEL_2:
	  noc_coms$D_IN = MUX_noc_coms$write_1__VAL_2;
      WILL_FIRE_RL_noc_routers_2_node_justForward: noc_coms$D_IN = noc_coms_2;
      MUX_noc_coms$write_1__SEL_4: noc_coms$D_IN = 36'd0;
      default: noc_coms$D_IN = 36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign noc_coms$EN =
	     WILL_FIRE_RL_noc_routers_2_node_detectSndStart ||
	     WILL_FIRE_RL_noc_routers_2_node_continueRcv ||
	     WILL_FIRE_RL_noc_routers_2_node_detectRcvStart ||
	     WILL_FIRE_RL_noc_routers_2_node_justForward ||
	     WILL_FIRE_RL_noc_routers_2_node_defaultNil ||
	     WILL_FIRE_RL_noc_routers_2_node_waitLastAck ;

  // register noc_coms_1
  always@(WILL_FIRE_RL_noc_routers_0_node_detectSndStart or
	  MUX_noc_coms_1$write_1__VAL_1 or
	  MUX_noc_coms_1$write_1__SEL_2 or
	  MUX_noc_coms_1$write_1__VAL_2 or
	  WILL_FIRE_RL_noc_routers_0_node_justForward or
	  noc_coms or MUX_noc_coms_1$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_noc_routers_0_node_detectSndStart:
	  noc_coms_1$D_IN = MUX_noc_coms_1$write_1__VAL_1;
      MUX_noc_coms_1$write_1__SEL_2:
	  noc_coms_1$D_IN = MUX_noc_coms_1$write_1__VAL_2;
      WILL_FIRE_RL_noc_routers_0_node_justForward: noc_coms_1$D_IN = noc_coms;
      MUX_noc_coms_1$write_1__SEL_4: noc_coms_1$D_IN = 36'd0;
      default: noc_coms_1$D_IN = 36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign noc_coms_1$EN =
	     WILL_FIRE_RL_noc_routers_0_node_detectSndStart ||
	     WILL_FIRE_RL_noc_routers_0_node_continueRcv ||
	     WILL_FIRE_RL_noc_routers_0_node_detectRcvStart ||
	     WILL_FIRE_RL_noc_routers_0_node_justForward ||
	     WILL_FIRE_RL_noc_routers_0_node_defaultNil ||
	     WILL_FIRE_RL_noc_routers_0_node_waitLastAck ;

  // register noc_coms_2
  always@(WILL_FIRE_RL_noc_routers_1_node_detectSndStart or
	  MUX_noc_coms_2$write_1__VAL_1 or
	  MUX_noc_coms_2$write_1__SEL_2 or
	  MUX_noc_coms_2$write_1__VAL_2 or
	  WILL_FIRE_RL_noc_routers_1_node_justForward or
	  noc_coms_1 or MUX_noc_coms_2$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_noc_routers_1_node_detectSndStart:
	  noc_coms_2$D_IN = MUX_noc_coms_2$write_1__VAL_1;
      MUX_noc_coms_2$write_1__SEL_2:
	  noc_coms_2$D_IN = MUX_noc_coms_2$write_1__VAL_2;
      WILL_FIRE_RL_noc_routers_1_node_justForward:
	  noc_coms_2$D_IN = noc_coms_1;
      MUX_noc_coms_2$write_1__SEL_4: noc_coms_2$D_IN = 36'd0;
      default: noc_coms_2$D_IN = 36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign noc_coms_2$EN =
	     WILL_FIRE_RL_noc_routers_1_node_detectSndStart ||
	     WILL_FIRE_RL_noc_routers_1_node_continueRcv ||
	     WILL_FIRE_RL_noc_routers_1_node_detectRcvStart ||
	     WILL_FIRE_RL_noc_routers_1_node_justForward ||
	     WILL_FIRE_RL_noc_routers_1_node_defaultNil ||
	     WILL_FIRE_RL_noc_routers_1_node_waitLastAck ;

  // register noc_routers_0_cnt
  assign noc_routers_0_cnt$D_IN =
	     MUX_noc_routers_0_cnt$write_1__SEL_1 ? 2'd3 : 2'd0 ;
  assign noc_routers_0_cnt$EN =
	     routers_0_rd || routers_0_wr ||
	     WILL_FIRE_RL_noc_routers_0_waitRcvData ||
	     WILL_FIRE_RL_noc_routers_0_do_readStatus ||
	     WILL_FIRE_RL_noc_routers_0_do_readRcvSource ||
	     WILL_FIRE_RL_noc_routers_0_do_readRcvCount ||
	     WILL_FIRE_RL_noc_routers_0_do_writeReset ||
	     WILL_FIRE_RL_noc_routers_0_do_writeSndCount ||
	     WILL_FIRE_RL_noc_routers_0_do_writeSndDest ||
	     WILL_FIRE_RL_noc_routers_0_do_writeSndData ;

  // register noc_routers_0_node_dst
  assign noc_routers_0_node_dst$D_IN = noc_routers_0_res[1:0] ;
  assign noc_routers_0_node_dst$EN =
	     WILL_FIRE_RL_noc_routers_0_do_writeSndDest ;

  // register noc_routers_0_node_firstWord
  assign noc_routers_0_node_firstWord$D_IN =
	     WILL_FIRE_RL_noc_routers_0_do_writeSndCount ;
  assign noc_routers_0_node_firstWord$EN =
	     WILL_FIRE_RL_noc_routers_0_node_detectSndStart ||
	     WILL_FIRE_RL_noc_routers_0_do_writeSndCount ;

  // register noc_routers_0_node_flagEoD
  assign noc_routers_0_node_flagEoD$D_IN =
	     !WILL_FIRE_RL_noc_routers_0_do_writeReset ;
  assign noc_routers_0_node_flagEoD$EN =
	     WILL_FIRE_RL_noc_routers_0_node_continueRcv &&
	     noc_coms[33:32] == 2'd3 ||
	     WILL_FIRE_RL_noc_routers_0_node_detectRcvStart &&
	     noc_coms[33:32] != 2'd1 ||
	     WILL_FIRE_RL_noc_routers_0_do_writeReset ;

  // register noc_routers_0_node_rcvCnt
  always@(WILL_FIRE_RL_noc_routers_0_waitRcvData or
	  MUX_noc_routers_0_node_rcvCnt$write_1__VAL_1 or
	  WILL_FIRE_RL_noc_routers_0_do_writeReset or
	  WILL_FIRE_RL_noc_routers_0_node_continueRcv or
	  x__h1397 or WILL_FIRE_RL_noc_routers_0_node_detectRcvStart)
  case (1'b1)
    WILL_FIRE_RL_noc_routers_0_waitRcvData:
	noc_routers_0_node_rcvCnt$D_IN =
	    MUX_noc_routers_0_node_rcvCnt$write_1__VAL_1;
    WILL_FIRE_RL_noc_routers_0_do_writeReset:
	noc_routers_0_node_rcvCnt$D_IN = 8'd0;
    WILL_FIRE_RL_noc_routers_0_node_continueRcv:
	noc_routers_0_node_rcvCnt$D_IN = x__h1397;
    WILL_FIRE_RL_noc_routers_0_node_detectRcvStart:
	noc_routers_0_node_rcvCnt$D_IN = 8'd1;
    default: noc_routers_0_node_rcvCnt$D_IN =
		 8'b10101010 /* unspecified value */ ;
  endcase
  assign noc_routers_0_node_rcvCnt$EN =
	     WILL_FIRE_RL_noc_routers_0_node_continueRcv ||
	     WILL_FIRE_RL_noc_routers_0_waitRcvData ||
	     WILL_FIRE_RL_noc_routers_0_do_writeReset ||
	     WILL_FIRE_RL_noc_routers_0_node_detectRcvStart ;

  // register noc_routers_0_node_rcvMore
  assign noc_routers_0_node_rcvMore$D_IN =
	     !WILL_FIRE_RL_noc_routers_0_do_writeReset &&
	     !MUX_noc_routers_0_node_flagEoD$write_1__SEL_2 ;
  assign noc_routers_0_node_rcvMore$EN =
	     WILL_FIRE_RL_noc_routers_0_node_detectRcvStart &&
	     noc_coms[33:32] == 2'd1 ||
	     WILL_FIRE_RL_noc_routers_0_node_continueRcv &&
	     noc_coms[33:32] == 2'd3 ||
	     WILL_FIRE_RL_noc_routers_0_do_writeReset ;

  // register noc_routers_0_node_sending
  assign noc_routers_0_node_sending$D_IN =
	     WILL_FIRE_RL_noc_routers_0_do_writeSndCount ;
  assign noc_routers_0_node_sending$EN =
	     WILL_FIRE_RL_noc_routers_0_node_waitLastAck ||
	     WILL_FIRE_RL_noc_routers_0_do_writeSndCount ;

  // register noc_routers_0_node_slot
  assign noc_routers_0_node_slot$D_IN = noc_routers_0_node_slot + 2'd1 ;
  assign noc_routers_0_node_slot$EN = 1'd1 ;

  // register noc_routers_0_node_sndCnt
  assign noc_routers_0_node_sndCnt$D_IN =
	     WILL_FIRE_RL_noc_routers_0_do_writeSndCount ?
	       noc_routers_0_res[7:0] :
	       MUX_noc_routers_0_node_sndCnt$write_1__VAL_2 ;
  assign noc_routers_0_node_sndCnt$EN =
	     WILL_FIRE_RL_noc_routers_0_node_detectSndStart ||
	     WILL_FIRE_RL_noc_routers_0_do_writeSndCount ;

  // register noc_routers_0_node_src
  assign noc_routers_0_node_src$D_IN = noc_routers_0_node_slot ;
  assign noc_routers_0_node_src$EN =
	     WILL_FIRE_RL_noc_routers_0_node_detectRcvStart ;

  // register noc_routers_0_rdreq
  assign noc_routers_0_rdreq$D_IN = routers_0_address ;
  assign noc_routers_0_rdreq$EN = routers_0_rd && !routers_0_wr ;

  // register noc_routers_0_res
  always@(MUX_noc_routers_0_res$write_1__SEL_1 or
	  routers_0_wr_data or
	  WILL_FIRE_RL_noc_routers_0_waitRcvData or
	  noc_routers_0_node_rcvFIFO$D_OUT or
	  WILL_FIRE_RL_noc_routers_0_do_readStatus or
	  MUX_noc_routers_0_res$write_1__VAL_3 or
	  WILL_FIRE_RL_noc_routers_0_do_readRcvSource or
	  MUX_noc_routers_0_res$write_1__VAL_4 or
	  WILL_FIRE_RL_noc_routers_0_do_readRcvCount or
	  MUX_noc_routers_0_res$write_1__VAL_5)
  case (1'b1)
    MUX_noc_routers_0_res$write_1__SEL_1:
	noc_routers_0_res$D_IN = routers_0_wr_data;
    WILL_FIRE_RL_noc_routers_0_waitRcvData:
	noc_routers_0_res$D_IN = noc_routers_0_node_rcvFIFO$D_OUT;
    WILL_FIRE_RL_noc_routers_0_do_readStatus:
	noc_routers_0_res$D_IN = MUX_noc_routers_0_res$write_1__VAL_3;
    WILL_FIRE_RL_noc_routers_0_do_readRcvSource:
	noc_routers_0_res$D_IN = MUX_noc_routers_0_res$write_1__VAL_4;
    WILL_FIRE_RL_noc_routers_0_do_readRcvCount:
	noc_routers_0_res$D_IN = MUX_noc_routers_0_res$write_1__VAL_5;
    default: noc_routers_0_res$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign noc_routers_0_res$EN =
	     routers_0_wr && !routers_0_rd ||
	     WILL_FIRE_RL_noc_routers_0_waitRcvData ||
	     WILL_FIRE_RL_noc_routers_0_do_readStatus ||
	     WILL_FIRE_RL_noc_routers_0_do_readRcvCount ||
	     WILL_FIRE_RL_noc_routers_0_do_readRcvSource ;

  // register noc_routers_0_rnw
  assign noc_routers_0_rnw$D_IN = routers_0_rd && !routers_0_wr ;
  assign noc_routers_0_rnw$EN =
	     routers_0_rd && !routers_0_wr || routers_0_wr && !routers_0_rd ;

  // register noc_routers_0_wrreq
  assign noc_routers_0_wrreq$D_IN = routers_0_address ;
  assign noc_routers_0_wrreq$EN = MUX_noc_routers_0_res$write_1__SEL_1 ;

  // register noc_routers_1_cnt
  assign noc_routers_1_cnt$D_IN =
	     MUX_noc_routers_1_cnt$write_1__SEL_1 ? 2'd3 : 2'd0 ;
  assign noc_routers_1_cnt$EN =
	     routers_1_rd || routers_1_wr ||
	     WILL_FIRE_RL_noc_routers_1_waitRcvData ||
	     WILL_FIRE_RL_noc_routers_1_do_readStatus ||
	     WILL_FIRE_RL_noc_routers_1_do_readRcvSource ||
	     WILL_FIRE_RL_noc_routers_1_do_readRcvCount ||
	     WILL_FIRE_RL_noc_routers_1_do_writeReset ||
	     WILL_FIRE_RL_noc_routers_1_do_writeSndCount ||
	     WILL_FIRE_RL_noc_routers_1_do_writeSndDest ||
	     WILL_FIRE_RL_noc_routers_1_do_writeSndData ;

  // register noc_routers_1_node_dst
  assign noc_routers_1_node_dst$D_IN = noc_routers_1_res[1:0] ;
  assign noc_routers_1_node_dst$EN =
	     WILL_FIRE_RL_noc_routers_1_do_writeSndDest ;

  // register noc_routers_1_node_firstWord
  assign noc_routers_1_node_firstWord$D_IN =
	     WILL_FIRE_RL_noc_routers_1_do_writeSndCount ;
  assign noc_routers_1_node_firstWord$EN =
	     WILL_FIRE_RL_noc_routers_1_node_detectSndStart ||
	     WILL_FIRE_RL_noc_routers_1_do_writeSndCount ;

  // register noc_routers_1_node_flagEoD
  assign noc_routers_1_node_flagEoD$D_IN =
	     !WILL_FIRE_RL_noc_routers_1_do_writeReset ;
  assign noc_routers_1_node_flagEoD$EN =
	     WILL_FIRE_RL_noc_routers_1_node_continueRcv &&
	     noc_coms_1[33:32] == 2'd3 ||
	     WILL_FIRE_RL_noc_routers_1_node_detectRcvStart &&
	     noc_coms_1[33:32] != 2'd1 ||
	     WILL_FIRE_RL_noc_routers_1_do_writeReset ;

  // register noc_routers_1_node_rcvCnt
  always@(WILL_FIRE_RL_noc_routers_1_waitRcvData or
	  MUX_noc_routers_1_node_rcvCnt$write_1__VAL_1 or
	  WILL_FIRE_RL_noc_routers_1_do_writeReset or
	  WILL_FIRE_RL_noc_routers_1_node_continueRcv or
	  x__h4242 or WILL_FIRE_RL_noc_routers_1_node_detectRcvStart)
  case (1'b1)
    WILL_FIRE_RL_noc_routers_1_waitRcvData:
	noc_routers_1_node_rcvCnt$D_IN =
	    MUX_noc_routers_1_node_rcvCnt$write_1__VAL_1;
    WILL_FIRE_RL_noc_routers_1_do_writeReset:
	noc_routers_1_node_rcvCnt$D_IN = 8'd0;
    WILL_FIRE_RL_noc_routers_1_node_continueRcv:
	noc_routers_1_node_rcvCnt$D_IN = x__h4242;
    WILL_FIRE_RL_noc_routers_1_node_detectRcvStart:
	noc_routers_1_node_rcvCnt$D_IN = 8'd1;
    default: noc_routers_1_node_rcvCnt$D_IN =
		 8'b10101010 /* unspecified value */ ;
  endcase
  assign noc_routers_1_node_rcvCnt$EN =
	     WILL_FIRE_RL_noc_routers_1_node_continueRcv ||
	     WILL_FIRE_RL_noc_routers_1_waitRcvData ||
	     WILL_FIRE_RL_noc_routers_1_do_writeReset ||
	     WILL_FIRE_RL_noc_routers_1_node_detectRcvStart ;

  // register noc_routers_1_node_rcvMore
  assign noc_routers_1_node_rcvMore$D_IN =
	     !WILL_FIRE_RL_noc_routers_1_do_writeReset &&
	     !MUX_noc_routers_1_node_flagEoD$write_1__SEL_2 ;
  assign noc_routers_1_node_rcvMore$EN =
	     WILL_FIRE_RL_noc_routers_1_node_detectRcvStart &&
	     noc_coms_1[33:32] == 2'd1 ||
	     WILL_FIRE_RL_noc_routers_1_node_continueRcv &&
	     noc_coms_1[33:32] == 2'd3 ||
	     WILL_FIRE_RL_noc_routers_1_do_writeReset ;

  // register noc_routers_1_node_sending
  assign noc_routers_1_node_sending$D_IN =
	     WILL_FIRE_RL_noc_routers_1_do_writeSndCount ;
  assign noc_routers_1_node_sending$EN =
	     WILL_FIRE_RL_noc_routers_1_node_waitLastAck ||
	     WILL_FIRE_RL_noc_routers_1_do_writeSndCount ;

  // register noc_routers_1_node_slot
  assign noc_routers_1_node_slot$D_IN = noc_routers_1_node_slot + 2'd1 ;
  assign noc_routers_1_node_slot$EN = 1'd1 ;

  // register noc_routers_1_node_sndCnt
  assign noc_routers_1_node_sndCnt$D_IN =
	     WILL_FIRE_RL_noc_routers_1_do_writeSndCount ?
	       noc_routers_1_res[7:0] :
	       MUX_noc_routers_1_node_sndCnt$write_1__VAL_2 ;
  assign noc_routers_1_node_sndCnt$EN =
	     WILL_FIRE_RL_noc_routers_1_node_detectSndStart ||
	     WILL_FIRE_RL_noc_routers_1_do_writeSndCount ;

  // register noc_routers_1_node_src
  assign noc_routers_1_node_src$D_IN = noc_routers_1_node_slot ;
  assign noc_routers_1_node_src$EN =
	     WILL_FIRE_RL_noc_routers_1_node_detectRcvStart ;

  // register noc_routers_1_rdreq
  assign noc_routers_1_rdreq$D_IN = routers_1_address ;
  assign noc_routers_1_rdreq$EN = routers_1_rd && !routers_1_wr ;

  // register noc_routers_1_res
  always@(MUX_noc_routers_1_res$write_1__SEL_1 or
	  routers_1_wr_data or
	  WILL_FIRE_RL_noc_routers_1_waitRcvData or
	  noc_routers_1_node_rcvFIFO$D_OUT or
	  WILL_FIRE_RL_noc_routers_1_do_readStatus or
	  MUX_noc_routers_1_res$write_1__VAL_3 or
	  WILL_FIRE_RL_noc_routers_1_do_readRcvSource or
	  MUX_noc_routers_1_res$write_1__VAL_4 or
	  WILL_FIRE_RL_noc_routers_1_do_readRcvCount or
	  MUX_noc_routers_1_res$write_1__VAL_5)
  case (1'b1)
    MUX_noc_routers_1_res$write_1__SEL_1:
	noc_routers_1_res$D_IN = routers_1_wr_data;
    WILL_FIRE_RL_noc_routers_1_waitRcvData:
	noc_routers_1_res$D_IN = noc_routers_1_node_rcvFIFO$D_OUT;
    WILL_FIRE_RL_noc_routers_1_do_readStatus:
	noc_routers_1_res$D_IN = MUX_noc_routers_1_res$write_1__VAL_3;
    WILL_FIRE_RL_noc_routers_1_do_readRcvSource:
	noc_routers_1_res$D_IN = MUX_noc_routers_1_res$write_1__VAL_4;
    WILL_FIRE_RL_noc_routers_1_do_readRcvCount:
	noc_routers_1_res$D_IN = MUX_noc_routers_1_res$write_1__VAL_5;
    default: noc_routers_1_res$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign noc_routers_1_res$EN =
	     routers_1_wr && !routers_1_rd ||
	     WILL_FIRE_RL_noc_routers_1_waitRcvData ||
	     WILL_FIRE_RL_noc_routers_1_do_readStatus ||
	     WILL_FIRE_RL_noc_routers_1_do_readRcvCount ||
	     WILL_FIRE_RL_noc_routers_1_do_readRcvSource ;

  // register noc_routers_1_rnw
  assign noc_routers_1_rnw$D_IN = routers_1_rd && !routers_1_wr ;
  assign noc_routers_1_rnw$EN =
	     routers_1_rd && !routers_1_wr || routers_1_wr && !routers_1_rd ;

  // register noc_routers_1_wrreq
  assign noc_routers_1_wrreq$D_IN = routers_1_address ;
  assign noc_routers_1_wrreq$EN = MUX_noc_routers_1_res$write_1__SEL_1 ;

  // register noc_routers_2_cnt
  assign noc_routers_2_cnt$D_IN =
	     MUX_noc_routers_2_cnt$write_1__SEL_1 ? 2'd3 : 2'd0 ;
  assign noc_routers_2_cnt$EN =
	     routers_2_rd || routers_2_wr ||
	     WILL_FIRE_RL_noc_routers_2_waitRcvData ||
	     WILL_FIRE_RL_noc_routers_2_do_readStatus ||
	     WILL_FIRE_RL_noc_routers_2_do_readRcvSource ||
	     WILL_FIRE_RL_noc_routers_2_do_readRcvCount ||
	     WILL_FIRE_RL_noc_routers_2_do_writeReset ||
	     WILL_FIRE_RL_noc_routers_2_do_writeSndCount ||
	     WILL_FIRE_RL_noc_routers_2_do_writeSndDest ||
	     WILL_FIRE_RL_noc_routers_2_do_writeSndData ;

  // register noc_routers_2_node_dst
  assign noc_routers_2_node_dst$D_IN = noc_routers_2_res[1:0] ;
  assign noc_routers_2_node_dst$EN =
	     WILL_FIRE_RL_noc_routers_2_do_writeSndDest ;

  // register noc_routers_2_node_firstWord
  assign noc_routers_2_node_firstWord$D_IN =
	     WILL_FIRE_RL_noc_routers_2_do_writeSndCount ;
  assign noc_routers_2_node_firstWord$EN =
	     WILL_FIRE_RL_noc_routers_2_node_detectSndStart ||
	     WILL_FIRE_RL_noc_routers_2_do_writeSndCount ;

  // register noc_routers_2_node_flagEoD
  assign noc_routers_2_node_flagEoD$D_IN =
	     !WILL_FIRE_RL_noc_routers_2_do_writeReset ;
  assign noc_routers_2_node_flagEoD$EN =
	     WILL_FIRE_RL_noc_routers_2_node_continueRcv &&
	     noc_coms_2[33:32] == 2'd3 ||
	     WILL_FIRE_RL_noc_routers_2_node_detectRcvStart &&
	     noc_coms_2[33:32] != 2'd1 ||
	     WILL_FIRE_RL_noc_routers_2_do_writeReset ;

  // register noc_routers_2_node_rcvCnt
  always@(WILL_FIRE_RL_noc_routers_2_waitRcvData or
	  MUX_noc_routers_2_node_rcvCnt$write_1__VAL_1 or
	  WILL_FIRE_RL_noc_routers_2_do_writeReset or
	  WILL_FIRE_RL_noc_routers_2_node_continueRcv or
	  x__h7067 or WILL_FIRE_RL_noc_routers_2_node_detectRcvStart)
  case (1'b1)
    WILL_FIRE_RL_noc_routers_2_waitRcvData:
	noc_routers_2_node_rcvCnt$D_IN =
	    MUX_noc_routers_2_node_rcvCnt$write_1__VAL_1;
    WILL_FIRE_RL_noc_routers_2_do_writeReset:
	noc_routers_2_node_rcvCnt$D_IN = 8'd0;
    WILL_FIRE_RL_noc_routers_2_node_continueRcv:
	noc_routers_2_node_rcvCnt$D_IN = x__h7067;
    WILL_FIRE_RL_noc_routers_2_node_detectRcvStart:
	noc_routers_2_node_rcvCnt$D_IN = 8'd1;
    default: noc_routers_2_node_rcvCnt$D_IN =
		 8'b10101010 /* unspecified value */ ;
  endcase
  assign noc_routers_2_node_rcvCnt$EN =
	     WILL_FIRE_RL_noc_routers_2_node_continueRcv ||
	     WILL_FIRE_RL_noc_routers_2_waitRcvData ||
	     WILL_FIRE_RL_noc_routers_2_do_writeReset ||
	     WILL_FIRE_RL_noc_routers_2_node_detectRcvStart ;

  // register noc_routers_2_node_rcvMore
  assign noc_routers_2_node_rcvMore$D_IN =
	     !WILL_FIRE_RL_noc_routers_2_do_writeReset &&
	     !MUX_noc_routers_2_node_flagEoD$write_1__SEL_2 ;
  assign noc_routers_2_node_rcvMore$EN =
	     WILL_FIRE_RL_noc_routers_2_node_detectRcvStart &&
	     noc_coms_2[33:32] == 2'd1 ||
	     WILL_FIRE_RL_noc_routers_2_node_continueRcv &&
	     noc_coms_2[33:32] == 2'd3 ||
	     WILL_FIRE_RL_noc_routers_2_do_writeReset ;

  // register noc_routers_2_node_sending
  assign noc_routers_2_node_sending$D_IN =
	     WILL_FIRE_RL_noc_routers_2_do_writeSndCount ;
  assign noc_routers_2_node_sending$EN =
	     WILL_FIRE_RL_noc_routers_2_node_waitLastAck ||
	     WILL_FIRE_RL_noc_routers_2_do_writeSndCount ;

  // register noc_routers_2_node_slot
  assign noc_routers_2_node_slot$D_IN = noc_routers_2_node_slot + 2'd1 ;
  assign noc_routers_2_node_slot$EN = 1'd1 ;

  // register noc_routers_2_node_sndCnt
  assign noc_routers_2_node_sndCnt$D_IN =
	     WILL_FIRE_RL_noc_routers_2_do_writeSndCount ?
	       noc_routers_2_res[7:0] :
	       MUX_noc_routers_2_node_sndCnt$write_1__VAL_2 ;
  assign noc_routers_2_node_sndCnt$EN =
	     WILL_FIRE_RL_noc_routers_2_node_detectSndStart ||
	     WILL_FIRE_RL_noc_routers_2_do_writeSndCount ;

  // register noc_routers_2_node_src
  assign noc_routers_2_node_src$D_IN = noc_routers_2_node_slot ;
  assign noc_routers_2_node_src$EN =
	     WILL_FIRE_RL_noc_routers_2_node_detectRcvStart ;

  // register noc_routers_2_rdreq
  assign noc_routers_2_rdreq$D_IN = routers_2_address ;
  assign noc_routers_2_rdreq$EN = routers_2_rd && !routers_2_wr ;

  // register noc_routers_2_res
  always@(MUX_noc_routers_2_res$write_1__SEL_1 or
	  routers_2_wr_data or
	  WILL_FIRE_RL_noc_routers_2_waitRcvData or
	  noc_routers_2_node_rcvFIFO$D_OUT or
	  WILL_FIRE_RL_noc_routers_2_do_readStatus or
	  MUX_noc_routers_2_res$write_1__VAL_3 or
	  WILL_FIRE_RL_noc_routers_2_do_readRcvSource or
	  MUX_noc_routers_2_res$write_1__VAL_4 or
	  WILL_FIRE_RL_noc_routers_2_do_readRcvCount or
	  MUX_noc_routers_2_res$write_1__VAL_5)
  case (1'b1)
    MUX_noc_routers_2_res$write_1__SEL_1:
	noc_routers_2_res$D_IN = routers_2_wr_data;
    WILL_FIRE_RL_noc_routers_2_waitRcvData:
	noc_routers_2_res$D_IN = noc_routers_2_node_rcvFIFO$D_OUT;
    WILL_FIRE_RL_noc_routers_2_do_readStatus:
	noc_routers_2_res$D_IN = MUX_noc_routers_2_res$write_1__VAL_3;
    WILL_FIRE_RL_noc_routers_2_do_readRcvSource:
	noc_routers_2_res$D_IN = MUX_noc_routers_2_res$write_1__VAL_4;
    WILL_FIRE_RL_noc_routers_2_do_readRcvCount:
	noc_routers_2_res$D_IN = MUX_noc_routers_2_res$write_1__VAL_5;
    default: noc_routers_2_res$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign noc_routers_2_res$EN =
	     routers_2_wr && !routers_2_rd ||
	     WILL_FIRE_RL_noc_routers_2_waitRcvData ||
	     WILL_FIRE_RL_noc_routers_2_do_readStatus ||
	     WILL_FIRE_RL_noc_routers_2_do_readRcvCount ||
	     WILL_FIRE_RL_noc_routers_2_do_readRcvSource ;

  // register noc_routers_2_rnw
  assign noc_routers_2_rnw$D_IN = routers_2_rd && !routers_2_wr ;
  assign noc_routers_2_rnw$EN =
	     routers_2_rd && !routers_2_wr || routers_2_wr && !routers_2_rd ;

  // register noc_routers_2_wrreq
  assign noc_routers_2_wrreq$D_IN = routers_2_address ;
  assign noc_routers_2_wrreq$EN = MUX_noc_routers_2_res$write_1__SEL_1 ;

  // submodule noc_routers_0_node_rcvFIFO
  assign noc_routers_0_node_rcvFIFO$D_IN = noc_coms[31:0] ;
  assign noc_routers_0_node_rcvFIFO$DEQ =
	     WILL_FIRE_RL_noc_routers_0_waitRcvData ;
  assign noc_routers_0_node_rcvFIFO$CLR =
	     WILL_FIRE_RL_noc_routers_0_do_writeReset ;
  assign noc_routers_0_node_rcvFIFO$ENQ = MUX_noc_coms_1$write_1__SEL_2 ;

  // submodule noc_routers_0_node_sndFIFO
  assign noc_routers_0_node_sndFIFO$D_IN = noc_routers_0_res ;
  assign noc_routers_0_node_sndFIFO$DEQ =
	     WILL_FIRE_RL_noc_routers_0_node_detectSndStart ;
  assign noc_routers_0_node_sndFIFO$CLR =
	     WILL_FIRE_RL_noc_routers_0_do_writeSndCount ;
  assign noc_routers_0_node_sndFIFO$ENQ =
	     WILL_FIRE_RL_noc_routers_0_do_writeSndData ;

  // submodule noc_routers_1_node_rcvFIFO
  assign noc_routers_1_node_rcvFIFO$D_IN = noc_coms_1[31:0] ;
  assign noc_routers_1_node_rcvFIFO$CLR =
	     WILL_FIRE_RL_noc_routers_1_do_writeReset ;
  assign noc_routers_1_node_rcvFIFO$ENQ = MUX_noc_coms_2$write_1__SEL_2 ;
  assign noc_routers_1_node_rcvFIFO$DEQ =
	     WILL_FIRE_RL_noc_routers_1_waitRcvData ;

  // submodule noc_routers_1_node_sndFIFO
  assign noc_routers_1_node_sndFIFO$D_IN = noc_routers_1_res ;
  assign noc_routers_1_node_sndFIFO$DEQ =
	     WILL_FIRE_RL_noc_routers_1_node_detectSndStart ;
  assign noc_routers_1_node_sndFIFO$CLR =
	     WILL_FIRE_RL_noc_routers_1_do_writeSndCount ;
  assign noc_routers_1_node_sndFIFO$ENQ =
	     WILL_FIRE_RL_noc_routers_1_do_writeSndData ;

  // submodule noc_routers_2_node_rcvFIFO
  assign noc_routers_2_node_rcvFIFO$D_IN = noc_coms_2[31:0] ;
  assign noc_routers_2_node_rcvFIFO$DEQ =
	     WILL_FIRE_RL_noc_routers_2_waitRcvData ;
  assign noc_routers_2_node_rcvFIFO$CLR =
	     WILL_FIRE_RL_noc_routers_2_do_writeReset ;
  assign noc_routers_2_node_rcvFIFO$ENQ = MUX_noc_coms$write_1__SEL_2 ;

  // submodule noc_routers_2_node_sndFIFO
  assign noc_routers_2_node_sndFIFO$D_IN = noc_routers_2_res ;
  assign noc_routers_2_node_sndFIFO$DEQ =
	     WILL_FIRE_RL_noc_routers_2_node_detectSndStart ;
  assign noc_routers_2_node_sndFIFO$CLR =
	     WILL_FIRE_RL_noc_routers_2_do_writeSndCount ;
  assign noc_routers_2_node_sndFIFO$ENQ =
	     WILL_FIRE_RL_noc_routers_2_do_writeSndData ;

  // remaining internal signals
  assign noc_routers_0_node_slot_82_EQ_0_86_AND_noc_rou_ETC___d328 =
	     noc_routers_0_node_slot == 2'd0 && noc_routers_0_node_sending &&
	     (noc_routers_0_node_firstWord || noc_coms[33:32] == 2'd2) &&
	     noc_routers_0_node_sndCnt != 8'd0 ;
  assign noc_routers_1_node_slot_70_EQ_1_74_AND_noc_rou_ETC___d216 =
	     noc_routers_1_node_slot == 2'd1 && noc_routers_1_node_sending &&
	     (noc_routers_1_node_firstWord || noc_coms_1[33:32] == 2'd2) &&
	     noc_routers_1_node_sndCnt != 8'd0 ;
  assign noc_routers_2_node_slot_7_EQ_2_1_AND_noc_route_ETC___d104 =
	     noc_routers_2_node_slot == 2'd2 && noc_routers_2_node_sending &&
	     (noc_routers_2_node_firstWord || noc_coms_2[33:32] == 2'd2) &&
	     noc_routers_2_node_sndCnt != 8'd0 ;
  assign statusByte__h3007 =
	     { !noc_routers_0_node_rcvFIFO$FULL_N,
	       !noc_routers_0_node_rcvFIFO$EMPTY_N,
	       !noc_routers_0_node_sndFIFO$FULL_N,
	       !noc_routers_0_node_sndFIFO$EMPTY_N,
	       noc_routers_0_node_flagEoD,
	       noc_routers_0_node_rcvMore,
	       noc_routers_0_node_sending,
	       noc_routers_0_node_sending || noc_routers_0_node_rcvMore } ;
  assign statusByte__h5840 =
	     { !noc_routers_1_node_rcvFIFO$FULL_N,
	       !noc_routers_1_node_rcvFIFO$EMPTY_N,
	       !noc_routers_1_node_sndFIFO$FULL_N,
	       !noc_routers_1_node_sndFIFO$EMPTY_N,
	       noc_routers_1_node_flagEoD,
	       noc_routers_1_node_rcvMore,
	       noc_routers_1_node_sending,
	       noc_routers_1_node_sending || noc_routers_1_node_rcvMore } ;
  assign statusByte__h8665 =
	     { !noc_routers_2_node_rcvFIFO$FULL_N,
	       !noc_routers_2_node_rcvFIFO$EMPTY_N,
	       !noc_routers_2_node_sndFIFO$FULL_N,
	       !noc_routers_2_node_sndFIFO$EMPTY_N,
	       noc_routers_2_node_flagEoD,
	       noc_routers_2_node_rcvMore,
	       noc_routers_2_node_sending,
	       noc_routers_2_node_sending || noc_routers_2_node_rcvMore } ;
  assign x__h1397 = noc_routers_0_node_rcvCnt + 8'd1 ;
  assign x__h3034 = { statusByte__h3007, 8'd0 } ;
  assign x__h4242 = noc_routers_1_node_rcvCnt + 8'd1 ;
  assign x__h5867 = { statusByte__h5840, 8'd1 } ;
  assign x__h7067 = noc_routers_2_node_rcvCnt + 8'd1 ;
  assign x__h8692 = { statusByte__h8665, 8'd2 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        noc_routers_0_node_firstWord <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_0_node_flagEoD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_0_node_rcvMore <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_0_node_sending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_1_node_firstWord <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_1_node_flagEoD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_1_node_rcvMore <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_1_node_sending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_2_node_firstWord <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_2_node_flagEoD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_2_node_rcvMore <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_routers_2_node_sending <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (noc_routers_0_node_firstWord$EN)
	  noc_routers_0_node_firstWord <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_0_node_firstWord$D_IN;
	if (noc_routers_0_node_flagEoD$EN)
	  noc_routers_0_node_flagEoD <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_0_node_flagEoD$D_IN;
	if (noc_routers_0_node_rcvMore$EN)
	  noc_routers_0_node_rcvMore <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_0_node_rcvMore$D_IN;
	if (noc_routers_0_node_sending$EN)
	  noc_routers_0_node_sending <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_0_node_sending$D_IN;
	if (noc_routers_1_node_firstWord$EN)
	  noc_routers_1_node_firstWord <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_1_node_firstWord$D_IN;
	if (noc_routers_1_node_flagEoD$EN)
	  noc_routers_1_node_flagEoD <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_1_node_flagEoD$D_IN;
	if (noc_routers_1_node_rcvMore$EN)
	  noc_routers_1_node_rcvMore <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_1_node_rcvMore$D_IN;
	if (noc_routers_1_node_sending$EN)
	  noc_routers_1_node_sending <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_1_node_sending$D_IN;
	if (noc_routers_2_node_firstWord$EN)
	  noc_routers_2_node_firstWord <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_2_node_firstWord$D_IN;
	if (noc_routers_2_node_flagEoD$EN)
	  noc_routers_2_node_flagEoD <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_2_node_flagEoD$D_IN;
	if (noc_routers_2_node_rcvMore$EN)
	  noc_routers_2_node_rcvMore <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_2_node_rcvMore$D_IN;
	if (noc_routers_2_node_sending$EN)
	  noc_routers_2_node_sending <= `BSV_ASSIGNMENT_DELAY
	      noc_routers_2_node_sending$D_IN;
      end
    if (noc_coms$EN) noc_coms <= `BSV_ASSIGNMENT_DELAY noc_coms$D_IN;
    if (noc_coms_1$EN) noc_coms_1 <= `BSV_ASSIGNMENT_DELAY noc_coms_1$D_IN;
    if (noc_coms_2$EN) noc_coms_2 <= `BSV_ASSIGNMENT_DELAY noc_coms_2$D_IN;
    if (noc_routers_0_node_dst$EN)
      noc_routers_0_node_dst <= `BSV_ASSIGNMENT_DELAY
	  noc_routers_0_node_dst$D_IN;
    if (noc_routers_0_node_slot$EN)
      noc_routers_0_node_slot <= `BSV_ASSIGNMENT_DELAY
	  noc_routers_0_node_slot$D_IN;
    if (noc_routers_0_rdreq$EN)
      noc_routers_0_rdreq <= `BSV_ASSIGNMENT_DELAY noc_routers_0_rdreq$D_IN;
    if (noc_routers_0_res$EN)
      noc_routers_0_res <= `BSV_ASSIGNMENT_DELAY noc_routers_0_res$D_IN;
    if (noc_routers_0_wrreq$EN)
      noc_routers_0_wrreq <= `BSV_ASSIGNMENT_DELAY noc_routers_0_wrreq$D_IN;
    if (noc_routers_1_node_dst$EN)
      noc_routers_1_node_dst <= `BSV_ASSIGNMENT_DELAY
	  noc_routers_1_node_dst$D_IN;
    if (noc_routers_1_node_slot$EN)
      noc_routers_1_node_slot <= `BSV_ASSIGNMENT_DELAY
	  noc_routers_1_node_slot$D_IN;
    if (noc_routers_1_rdreq$EN)
      noc_routers_1_rdreq <= `BSV_ASSIGNMENT_DELAY noc_routers_1_rdreq$D_IN;
    if (noc_routers_1_res$EN)
      noc_routers_1_res <= `BSV_ASSIGNMENT_DELAY noc_routers_1_res$D_IN;
    if (noc_routers_1_wrreq$EN)
      noc_routers_1_wrreq <= `BSV_ASSIGNMENT_DELAY noc_routers_1_wrreq$D_IN;
    if (noc_routers_2_node_dst$EN)
      noc_routers_2_node_dst <= `BSV_ASSIGNMENT_DELAY
	  noc_routers_2_node_dst$D_IN;
    if (noc_routers_2_node_slot$EN)
      noc_routers_2_node_slot <= `BSV_ASSIGNMENT_DELAY
	  noc_routers_2_node_slot$D_IN;
    if (noc_routers_2_rdreq$EN)
      noc_routers_2_rdreq <= `BSV_ASSIGNMENT_DELAY noc_routers_2_rdreq$D_IN;
    if (noc_routers_2_res$EN)
      noc_routers_2_res <= `BSV_ASSIGNMENT_DELAY noc_routers_2_res$D_IN;
    if (noc_routers_2_wrreq$EN)
      noc_routers_2_wrreq <= `BSV_ASSIGNMENT_DELAY noc_routers_2_wrreq$D_IN;
  end

  always@(posedge CLK or negedge RST_N)
  if (!RST_N)
    begin
      noc_routers_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
      noc_routers_0_node_rcvCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
      noc_routers_0_node_sndCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
      noc_routers_0_node_src <= `BSV_ASSIGNMENT_DELAY 2'd0;
      noc_routers_0_rnw <= `BSV_ASSIGNMENT_DELAY 1'd0;
      noc_routers_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
      noc_routers_1_node_rcvCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
      noc_routers_1_node_sndCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
      noc_routers_1_node_src <= `BSV_ASSIGNMENT_DELAY 2'd1;
      noc_routers_1_rnw <= `BSV_ASSIGNMENT_DELAY 1'd0;
      noc_routers_2_cnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
      noc_routers_2_node_rcvCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
      noc_routers_2_node_sndCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
      noc_routers_2_node_src <= `BSV_ASSIGNMENT_DELAY 2'd2;
      noc_routers_2_rnw <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (noc_routers_0_cnt$EN)
	noc_routers_0_cnt <= `BSV_ASSIGNMENT_DELAY noc_routers_0_cnt$D_IN;
      if (noc_routers_0_node_rcvCnt$EN)
	noc_routers_0_node_rcvCnt <= `BSV_ASSIGNMENT_DELAY
	    noc_routers_0_node_rcvCnt$D_IN;
      if (noc_routers_0_node_sndCnt$EN)
	noc_routers_0_node_sndCnt <= `BSV_ASSIGNMENT_DELAY
	    noc_routers_0_node_sndCnt$D_IN;
      if (noc_routers_0_node_src$EN)
	noc_routers_0_node_src <= `BSV_ASSIGNMENT_DELAY
	    noc_routers_0_node_src$D_IN;
      if (noc_routers_0_rnw$EN)
	noc_routers_0_rnw <= `BSV_ASSIGNMENT_DELAY noc_routers_0_rnw$D_IN;
      if (noc_routers_1_cnt$EN)
	noc_routers_1_cnt <= `BSV_ASSIGNMENT_DELAY noc_routers_1_cnt$D_IN;
      if (noc_routers_1_node_rcvCnt$EN)
	noc_routers_1_node_rcvCnt <= `BSV_ASSIGNMENT_DELAY
	    noc_routers_1_node_rcvCnt$D_IN;
      if (noc_routers_1_node_sndCnt$EN)
	noc_routers_1_node_sndCnt <= `BSV_ASSIGNMENT_DELAY
	    noc_routers_1_node_sndCnt$D_IN;
      if (noc_routers_1_node_src$EN)
	noc_routers_1_node_src <= `BSV_ASSIGNMENT_DELAY
	    noc_routers_1_node_src$D_IN;
      if (noc_routers_1_rnw$EN)
	noc_routers_1_rnw <= `BSV_ASSIGNMENT_DELAY noc_routers_1_rnw$D_IN;
      if (noc_routers_2_cnt$EN)
	noc_routers_2_cnt <= `BSV_ASSIGNMENT_DELAY noc_routers_2_cnt$D_IN;
      if (noc_routers_2_node_rcvCnt$EN)
	noc_routers_2_node_rcvCnt <= `BSV_ASSIGNMENT_DELAY
	    noc_routers_2_node_rcvCnt$D_IN;
      if (noc_routers_2_node_sndCnt$EN)
	noc_routers_2_node_sndCnt <= `BSV_ASSIGNMENT_DELAY
	    noc_routers_2_node_sndCnt$D_IN;
      if (noc_routers_2_node_src$EN)
	noc_routers_2_node_src <= `BSV_ASSIGNMENT_DELAY
	    noc_routers_2_node_src$D_IN;
      if (noc_routers_2_rnw$EN)
	noc_routers_2_rnw <= `BSV_ASSIGNMENT_DELAY noc_routers_2_rnw$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    noc_coms = 36'hAAAAAAAAA;
    noc_coms_1 = 36'hAAAAAAAAA;
    noc_coms_2 = 36'hAAAAAAAAA;
    noc_routers_0_cnt = 2'h2;
    noc_routers_0_node_dst = 2'h2;
    noc_routers_0_node_firstWord = 1'h0;
    noc_routers_0_node_flagEoD = 1'h0;
    noc_routers_0_node_rcvCnt = 8'hAA;
    noc_routers_0_node_rcvMore = 1'h0;
    noc_routers_0_node_sending = 1'h0;
    noc_routers_0_node_slot = 2'h2;
    noc_routers_0_node_sndCnt = 8'hAA;
    noc_routers_0_node_src = 2'h2;
    noc_routers_0_rdreq = 2'h2;
    noc_routers_0_res = 32'hAAAAAAAA;
    noc_routers_0_rnw = 1'h0;
    noc_routers_0_wrreq = 2'h2;
    noc_routers_1_cnt = 2'h2;
    noc_routers_1_node_dst = 2'h2;
    noc_routers_1_node_firstWord = 1'h0;
    noc_routers_1_node_flagEoD = 1'h0;
    noc_routers_1_node_rcvCnt = 8'hAA;
    noc_routers_1_node_rcvMore = 1'h0;
    noc_routers_1_node_sending = 1'h0;
    noc_routers_1_node_slot = 2'h2;
    noc_routers_1_node_sndCnt = 8'hAA;
    noc_routers_1_node_src = 2'h2;
    noc_routers_1_rdreq = 2'h2;
    noc_routers_1_res = 32'hAAAAAAAA;
    noc_routers_1_rnw = 1'h0;
    noc_routers_1_wrreq = 2'h2;
    noc_routers_2_cnt = 2'h2;
    noc_routers_2_node_dst = 2'h2;
    noc_routers_2_node_firstWord = 1'h0;
    noc_routers_2_node_flagEoD = 1'h0;
    noc_routers_2_node_rcvCnt = 8'hAA;
    noc_routers_2_node_rcvMore = 1'h0;
    noc_routers_2_node_sending = 1'h0;
    noc_routers_2_node_slot = 2'h2;
    noc_routers_2_node_sndCnt = 8'hAA;
    noc_routers_2_node_src = 2'h2;
    noc_routers_2_rdreq = 2'h2;
    noc_routers_2_res = 32'hAAAAAAAA;
    noc_routers_2_rnw = 1'h0;
    noc_routers_2_wrreq = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_do_writeSndData)
	$display("data %h placed in the send FIFO", noc_routers_0_res);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_node_detectSndStart)
	$display("Sending word %h", noc_routers_0_node_sndCnt);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_node_detectSndStart &&
	  !noc_routers_0_node_firstWord &&
	  noc_coms[33:32] == 2'd2)
	$display("Ack for %h.", noc_routers_0_node_sndCnt + 8'd1);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_node_waitLastAck)
	$display("Last Ack received.");
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_node_detectRcvStart)
	$display("Receive Starts. Source is %h", noc_routers_0_node_slot);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_node_detectRcvStart)
	$display("receiving %h (word %h) from %h",
		 noc_coms[31:0],
		 $signed(32'd1),
		 noc_routers_0_node_slot);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_node_continueRcv)
	$display("receiving %h (word %h) from %h",
		 noc_coms[31:0],
		 x__h1397,
		 noc_routers_0_node_slot);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_node_continueRcv &&
	  noc_coms[33:32] == 2'd3)
	$display("EoD received.");
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_do_writeSndDest)
	$display("destination set to %h", noc_routers_0_res[1:0]);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_do_writeSndCount)
	$display("request sending %h words", noc_routers_0_res[7:0]);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_0_do_writeReset) $display("EoD reset.");
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_do_writeSndData)
	$display("data %h placed in the send FIFO", noc_routers_1_res);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_node_detectSndStart)
	$display("Sending word %h", noc_routers_1_node_sndCnt);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_node_detectSndStart &&
	  !noc_routers_1_node_firstWord &&
	  noc_coms_1[33:32] == 2'd2)
	$display("Ack for %h.", noc_routers_1_node_sndCnt + 8'd1);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_node_waitLastAck)
	$display("Last Ack received.");
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_node_detectRcvStart)
	$display("Receive Starts. Source is %h", noc_routers_1_node_slot);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_node_detectRcvStart)
	$display("receiving %h (word %h) from %h",
		 noc_coms_1[31:0],
		 $signed(32'd1),
		 noc_routers_1_node_slot);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_node_continueRcv)
	$display("receiving %h (word %h) from %h",
		 noc_coms_1[31:0],
		 x__h4242,
		 noc_routers_1_node_slot);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_node_continueRcv &&
	  noc_coms_1[33:32] == 2'd3)
	$display("EoD received.");
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_do_writeSndDest)
	$display("destination set to %h", noc_routers_1_res[1:0]);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_do_writeSndCount)
	$display("request sending %h words", noc_routers_1_res[7:0]);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_1_do_writeReset) $display("EoD reset.");
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_do_writeSndData)
	$display("data %h placed in the send FIFO", noc_routers_2_res);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_node_detectSndStart)
	$display("Sending word %h", noc_routers_2_node_sndCnt);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_node_detectSndStart &&
	  !noc_routers_2_node_firstWord &&
	  noc_coms_2[33:32] == 2'd2)
	$display("Ack for %h.", noc_routers_2_node_sndCnt + 8'd1);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_node_waitLastAck)
	$display("Last Ack received.");
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_node_detectRcvStart)
	$display("Receive Starts. Source is %h", noc_routers_2_node_slot);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_node_detectRcvStart)
	$display("receiving %h (word %h) from %h",
		 noc_coms_2[31:0],
		 $signed(32'd1),
		 noc_routers_2_node_slot);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_node_continueRcv)
	$display("receiving %h (word %h) from %h",
		 noc_coms_2[31:0],
		 x__h7067,
		 noc_routers_2_node_slot);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_node_continueRcv &&
	  noc_coms_2[33:32] == 2'd3)
	$display("EoD received.");
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_do_writeSndDest)
	$display("destination set to %h", noc_routers_2_res[1:0]);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_do_writeSndCount)
	$display("request sending %h words", noc_routers_2_res[7:0]);
    if (RST_N)
      if (WILL_FIRE_RL_noc_routers_2_do_writeReset) $display("EoD reset.");
    $display("Current slot is %h", noc_routers_2_node_slot);
    $display("Current slot is %h", noc_routers_1_node_slot);
    $display("Current slot is %h", noc_routers_0_node_slot);
  end
  // synopsys translate_on
endmodule  // mkNoC3bs2

